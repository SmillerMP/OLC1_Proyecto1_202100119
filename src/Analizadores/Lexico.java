/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.Symbol; 
import java.util.ArrayList;

import Clases.Errores;
import Clases.Tokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\12\1\12\1\11\22\0\1\1\1\13\1\6"+
    "\5\0\1\46\1\47\2\0\1\56\1\54\1\3\1\0\12\2\1\57"+
    "\1\55\1\14\1\53\1\15\1\0\1\52\1\22\1\31\1\33\1\26"+
    "\1\24\1\4\1\21\1\34\1\40\1\44\1\4\1\32\1\23\1\25"+
    "\1\20\1\16\1\4\1\17\1\36\1\43\1\30\1\27\1\4\1\42"+
    "\1\45\1\41\1\50\1\7\1\51\1\0\1\5\1\0\1\22\1\31"+
    "\1\33\1\26\1\24\1\4\1\21\1\34\1\40\1\44\1\4\1\32"+
    "\1\23\1\25\1\20\1\16\1\4\1\17\1\36\1\43\1\30\1\27"+
    "\1\4\1\42\1\45\1\41\12\0\1\12\113\0\1\4\37\0\1\4"+
    "\76\0\2\37\115\0\1\35\u1ea8\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\13\4\1\1\2\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\4\1\0\1\22\2\0\1\23\1\0\1\24\10\4"+
    "\1\0\5\4\1\0\5\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\3\1\0\1\4\1\0\1\4\2\25"+
    "\1\4\1\26\1\27\1\30\1\4\1\31\2\32\1\33"+
    "\3\4\2\34\1\35\5\4\1\0\1\4\2\36\1\0"+
    "\2\4\1\0\2\4\1\37\1\0\1\4\1\40\1\41"+
    "\1\42\1\4\1\0\3\4\1\0\2\4\1\43\1\0"+
    "\1\4\1\0\2\4\2\44\1\4\2\45\1\4\1\0"+
    "\2\4\1\46\1\0\2\4\1\0\1\4\1\0\5\4"+
    "\1\0\1\4\1\47\1\0\1\4\2\50\1\0\1\4"+
    "\1\51\1\0\1\4\2\52\1\53\1\0\2\4\1\0"+
    "\1\4\2\54\1\0\1\4\2\55\1\0\1\4\1\56"+
    "\1\57\1\56\1\57\2\60\1\61\1\0\1\4\2\62"+
    "\1\0\1\4\2\63\2\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\60\0\u0120"+
    "\0\u0150\0\60\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\u0420\0\u0450\0\360\0\60\0\u0480\0\u0120"+
    "\0\60\0\u0150\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u0420\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\60\0\300\0\u0a80\0\300\0\u0ab0\0\300"+
    "\0\u0ae0\0\300\0\60\0\300\0\300\0\u0b10\0\u0b40\0\u0b70"+
    "\0\60\0\300\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\60\0\300\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\300\0\u0e40\0\u0e70\0\300\0\300\0\300"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\300\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\60\0\300"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\300"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\300\0\u14d0\0\u1500"+
    "\0\60\0\300\0\u1530\0\u1560\0\300\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\300\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\60"+
    "\0\300\0\u1740\0\u1770\0\60\0\300\0\u17a0\0\u17d0\0\60"+
    "\0\60\0\300\0\300\0\60\0\300\0\300\0\u1800\0\u1830"+
    "\0\60\0\300\0\u1860\0\u1890\0\60\0\300\0\60\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\2"+
    "\1\7\1\3\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\5\1\15\1\16\1\17\1\20\1\5\1\21\1\22"+
    "\2\5\1\23\1\24\1\25\1\26\1\27\1\2\3\5"+
    "\1\30\2\5\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\61\0\1\3\7\0\1\3"+
    "\50\0\1\4\1\43\56\0\1\44\1\0\2\5\10\0"+
    "\17\5\1\0\1\5\1\0\6\5\12\0\6\45\1\46"+
    "\1\47\50\45\10\50\1\51\47\50\13\52\1\53\44\52"+
    "\2\0\1\44\1\0\2\5\10\0\1\5\1\54\15\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\6\5\1\55\10\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\1\5\1\56\15\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\1\5\1\57\15\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\2\5\1\60\1\5"+
    "\1\61\1\5\1\62\3\5\1\63\4\5\1\0\1\5"+
    "\1\64\1\65\5\5\14\0\1\44\1\0\2\5\10\0"+
    "\7\5\1\66\7\5\1\0\1\5\1\0\2\5\1\67"+
    "\1\5\1\70\1\5\14\0\1\44\1\0\2\5\10\0"+
    "\2\5\1\71\14\5\1\0\1\5\1\72\1\73\5\5"+
    "\14\0\1\44\1\0\2\5\10\0\4\5\1\74\12\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\4\5\1\75\12\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\2\5\1\76\13\5"+
    "\1\77\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\17\5\1\0\1\5\1\100\1\101\5\5"+
    "\42\0\1\102\31\0\1\44\1\0\2\5\10\0\12\5"+
    "\1\103\4\5\1\0\1\5\1\0\6\5\14\0\1\44"+
    "\1\0\2\5\10\0\17\5\1\0\1\5\1\104\1\105"+
    "\5\5\14\0\1\106\57\0\1\44\1\107\2\5\10\0"+
    "\17\5\1\0\1\5\1\0\6\5\12\0\10\45\3\0"+
    "\45\45\60\53\2\0\1\44\1\0\2\5\10\0\2\5"+
    "\1\110\14\5\1\0\1\5\1\111\1\112\5\5\14\0"+
    "\1\44\1\0\2\5\10\0\17\5\1\113\1\114\1\0"+
    "\6\5\14\0\1\44\1\0\2\5\10\0\4\5\1\115"+
    "\12\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\1\5\1\116\15\5\1\0\1\5\1\0"+
    "\6\5\14\0\1\44\1\0\2\5\10\0\10\5\1\117"+
    "\6\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\17\5\1\0\1\5\1\0\2\5\1\120"+
    "\3\5\14\0\1\44\1\0\2\5\10\0\10\5\1\121"+
    "\6\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\14\5\1\122\2\5\1\0\1\5\1\0"+
    "\6\5\37\0\1\123\34\0\1\44\1\0\2\5\10\0"+
    "\7\5\1\124\7\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\44\1\0\2\5\10\0\10\5\1\125\6\5\1\0"+
    "\1\5\1\0\6\5\14\0\1\44\1\0\2\5\10\0"+
    "\6\5\1\126\10\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\44\1\0\2\5\10\0\6\5\1\127\10\5\1\0"+
    "\1\5\1\0\6\5\14\0\1\44\1\0\2\5\10\0"+
    "\12\5\1\130\4\5\1\0\1\5\1\0\6\5\41\0"+
    "\1\131\32\0\1\44\1\0\2\5\10\0\11\5\1\132"+
    "\5\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\1\5\1\133\12\5\1\134\2\5\1\0"+
    "\1\5\1\0\6\5\14\0\1\44\1\0\2\5\10\0"+
    "\13\5\1\135\3\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\44\1\0\2\5\10\0\7\5\1\136\4\5\1\137"+
    "\2\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\4\5\1\140\12\5\1\0\1\5\1\0"+
    "\6\5\47\0\2\141\23\0\1\44\1\0\2\5\10\0"+
    "\17\5\1\141\1\142\1\0\6\5\35\0\1\143\36\0"+
    "\1\44\1\0\2\5\10\0\5\5\1\144\11\5\1\0"+
    "\1\5\1\0\6\5\55\0\1\145\16\0\1\44\1\0"+
    "\2\5\10\0\17\5\1\0\1\5\1\0\3\5\1\146"+
    "\2\5\14\0\1\5\57\0\1\44\1\0\2\5\10\0"+
    "\3\5\1\147\13\5\1\0\1\5\1\0\6\5\37\0"+
    "\1\150\34\0\1\44\1\0\2\5\10\0\7\5\1\151"+
    "\7\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\1\152\16\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\4\5\1\153\12\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\17\5\1\0\1\5\1\154\1\155\5\5\14\0"+
    "\1\44\1\0\2\5\10\0\15\5\1\156\1\5\1\0"+
    "\1\5\1\0\6\5\14\0\1\44\1\0\2\5\10\0"+
    "\17\5\1\0\1\5\1\0\2\5\1\157\2\5\1\160"+
    "\14\0\1\44\1\0\2\5\10\0\13\5\1\161\3\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\17\5\1\0\1\5\1\162\1\163\5\5\14\0"+
    "\1\44\1\0\2\5\10\0\12\5\1\164\4\5\1\0"+
    "\1\5\1\0\6\5\14\0\1\44\1\0\2\5\10\0"+
    "\6\5\1\165\10\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\44\1\0\2\5\10\0\17\5\1\166\1\167\1\0"+
    "\6\5\14\0\1\44\1\0\2\5\10\0\12\5\1\170"+
    "\4\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\1\5\1\171\15\5\1\0\1\5\1\0"+
    "\6\5\55\0\1\172\16\0\1\44\1\0\2\5\10\0"+
    "\17\5\1\0\1\5\1\0\3\5\1\173\2\5\42\0"+
    "\1\174\31\0\1\44\1\0\2\5\10\0\12\5\1\175"+
    "\4\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\1\5\1\176\15\5\1\0\1\5\1\0"+
    "\6\5\55\0\1\177\16\0\1\44\1\0\2\5\10\0"+
    "\17\5\1\0\1\5\1\0\3\5\1\200\2\5\14\0"+
    "\1\44\1\0\2\5\10\0\16\5\1\201\1\0\1\5"+
    "\1\0\6\5\34\0\1\202\37\0\1\44\1\0\2\5"+
    "\10\0\4\5\1\203\12\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\14\5\1\204\2\5"+
    "\1\0\1\5\1\0\6\5\34\0\1\205\37\0\1\44"+
    "\1\0\2\5\10\0\4\5\1\206\12\5\1\0\1\5"+
    "\1\0\6\5\14\0\1\44\1\0\2\5\10\0\6\5"+
    "\1\207\10\5\1\0\1\5\1\0\6\5\14\0\1\44"+
    "\1\0\2\5\10\0\14\5\1\210\2\5\1\0\1\5"+
    "\1\0\6\5\32\0\1\211\41\0\1\44\1\0\2\5"+
    "\10\0\2\5\1\212\14\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\5\5\1\213\11\5"+
    "\1\0\1\5\1\0\6\5\32\0\1\214\41\0\1\44"+
    "\1\0\2\5\10\0\2\5\1\215\14\5\1\0\1\5"+
    "\1\0\6\5\44\0\1\216\27\0\1\44\1\0\2\5"+
    "\10\0\14\5\1\217\2\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\4\5\1\220\12\5"+
    "\1\0\1\5\1\0\6\5\14\0\1\44\1\0\2\5"+
    "\10\0\1\221\12\5\1\222\1\223\2\5\1\0\1\5"+
    "\1\0\6\5\37\0\1\224\34\0\1\44\1\0\2\5"+
    "\10\0\7\5\1\225\7\5\1\0\1\5\1\0\6\5"+
    "\14\0\1\44\1\0\2\5\10\0\6\5\1\226\10\5"+
    "\1\0\1\5\1\0\6\5\37\0\1\227\34\0\1\44"+
    "\1\0\2\5\10\0\7\5\1\230\7\5\1\0\1\5"+
    "\1\0\6\5\14\0\1\44\1\0\2\5\10\0\17\5"+
    "\1\231\1\232\1\0\6\5\44\0\1\233\27\0\1\44"+
    "\1\0\2\5\10\0\14\5\1\234\2\5\1\0\1\5"+
    "\1\0\6\5\14\0\1\44\1\0\2\5\10\0\7\5"+
    "\1\235\7\5\1\0\1\5\1\0\6\5\33\0\1\236"+
    "\40\0\1\44\1\0\2\5\10\0\3\5\1\237\13\5"+
    "\1\0\1\5\1\0\6\5\32\0\1\240\41\0\1\44"+
    "\1\0\2\5\10\0\2\5\1\241\14\5\1\0\1\5"+
    "\1\0\6\5\14\0\1\44\1\0\2\5\10\0\5\5"+
    "\1\242\11\5\1\0\1\5\1\0\6\5\14\0\1\44"+
    "\1\0\2\5\10\0\17\5\1\0\1\5\1\243\1\244"+
    "\5\5\14\0\1\44\1\0\2\5\10\0\4\5\1\245"+
    "\12\5\1\0\1\5\1\0\6\5\14\0\1\44\1\0"+
    "\2\5\10\0\17\5\1\0\1\5\1\246\1\247\5\5"+
    "\34\0\1\250\37\0\1\44\1\0\2\5\10\0\4\5"+
    "\1\251\12\5\1\0\1\5\1\0\6\5\53\0\1\252"+
    "\20\0\1\44\1\0\2\5\10\0\17\5\1\0\1\5"+
    "\1\0\1\5\1\253\4\5\36\0\1\254\35\0\1\44"+
    "\1\0\2\5\10\0\6\5\1\255\10\5\1\0\1\5"+
    "\1\0\6\5\31\0\1\256\42\0\1\44\1\0\2\5"+
    "\10\0\1\5\1\257\15\5\1\0\1\5\1\0\6\5"+
    "\54\0\1\260\2\0\1\261\14\0\1\44\1\0\2\5"+
    "\10\0\17\5\1\0\1\5\1\0\2\5\1\262\2\5"+
    "\1\263\36\0\1\264\35\0\1\44\1\0\2\5\10\0"+
    "\6\5\1\265\10\5\1\0\1\5\1\0\6\5\14\0"+
    "\1\44\1\0\2\5\10\0\1\5\1\266\15\5\1\0"+
    "\1\5\1\0\6\5\37\0\1\267\34\0\1\44\1\0"+
    "\2\5\10\0\7\5\1\270\7\5\1\0\1\5\1\0"+
    "\6\5\34\0\1\271\37\0\1\44\1\0\2\5\10\0"+
    "\4\5\1\272\12\5\1\0\1\5\1\0\6\5\34\0"+
    "\1\273\37\0\1\44\1\0\2\5\10\0\4\5\1\274"+
    "\12\5\1\0\1\5\1\0\6\5\36\0\1\275\35\0"+
    "\1\44\1\0\2\5\10\0\6\5\1\276\10\5\1\0"+
    "\1\5\1\0\6\5\35\0\1\277\36\0\1\44\1\0"+
    "\2\5\10\0\5\5\1\300\11\5\1\0\1\5\1\0"+
    "\6\5\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\16\1\12\11"+
    "\1\0\1\1\1\0\1\11\2\0\1\11\1\0\11\1"+
    "\1\0\5\1\1\0\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\11\7\1"+
    "\1\11\5\1\1\11\7\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\5\1\1\0\3\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\11\5\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\0\4\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\2\11\2\1"+
    "\1\11\2\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static ArrayList<Errores> listaErrores = new ArrayList();
    public static ArrayList<Tokens> listaTokens = new ArrayList();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	yyline = 1; 
	yychar = 1; 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Este es un error lexico: "+yytext()+ ", en la linea: "+yyline+", en la columna: "+yychar);
    //listaErrores.add(new Errores("Lexico", "Caracter no encontrado: "+ yytext(), yyline+"", yychar+""));
            } 
            // fall through
          case 53: break;
          case 2: 
            { 
            } 
            // fall through
          case 54: break;
          case 3: 
            { listaTokens.add(new Tokens(yytext(), "DOUBLE", yyline+"", yychar+""));          return new Symbol(sym.DOUBLE,yyline,yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 4: 
            { listaTokens.add(new Tokens(yytext(), "ID", yyline+"", yychar+""));            return new Symbol(sym.ID,yyline,yychar, yytext());
            } 
            // fall through
          case 56: break;
          case 5: 
            { yychar=1;
            } 
            // fall through
          case 57: break;
          case 6: 
            { listaTokens.add(new Tokens(yytext(), "MENOR_QUE", yyline+"", yychar+""));     return new Symbol(sym.MENOR_QUE, yyline, yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 7: 
            { listaTokens.add(new Tokens(yytext(), "MAYOR_QUE", yyline+"", yychar+""));     return new Symbol(sym.MAYOR_QUE, yyline, yychar, yytext());
            } 
            // fall through
          case 59: break;
          case 8: 
            { listaTokens.add(new Tokens(yytext(), "PAR_IZQ", yyline+"", yychar+""));       return new Symbol(sym.PAR_IZQ, yyline, yychar, yytext());
            } 
            // fall through
          case 60: break;
          case 9: 
            { listaTokens.add(new Tokens(yytext(), "PAR_DER", yyline+"", yychar+""));       return new Symbol(sym.PAR_DER, yyline, yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 10: 
            { listaTokens.add(new Tokens(yytext(), "COR_IZQ", yyline+"", yychar+""));       return new Symbol(sym.COR_IZQ, yyline, yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 11: 
            { listaTokens.add(new Tokens(yytext(), "COR_DER", yyline+"", yychar+""));       return new Symbol(sym.COR_DER, yyline, yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 12: 
            { listaTokens.add(new Tokens(yytext(), "ARROBA", yyline+"", yychar+""));        return new Symbol(sym.ARROBA, yyline, yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 13: 
            { listaTokens.add(new Tokens(yytext(), "IGUAL", yyline+"", yychar+""));         return new Symbol(sym.IGUAL, yyline, yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 14: 
            { listaTokens.add(new Tokens(yytext(), "MENOS", yyline+"", yychar+""));         return new Symbol(sym.MENOS, yyline, yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 15: 
            { listaTokens.add(new Tokens(yytext(), "PTCOMA", yyline+"", yychar+""));        return new Symbol(sym.PTCOMA, yyline, yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 16: 
            { listaTokens.add(new Tokens(yytext(), "COMA", yyline+"", yychar+""));          return new Symbol(sym.COMA, yyline, yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 17: 
            { listaTokens.add(new Tokens(yytext(), "DOSPUNTOS", yyline+"", yychar+""));     return new Symbol(sym.DOSPUNTOS, yyline, yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 18: 
            { listaTokens.add(new Tokens(yytext(), "STRING", yyline+"", yychar+""));        return new Symbol(sym.STRING,yyline,yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 19: 
            { listaTokens.add(new Tokens(yytext(), "COM_SIMPLE", yyline+"", yychar+""));        return new Symbol(sym.COM_SIMPLE,yyline,yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 20: 
            { listaTokens.add(new Tokens(yytext(), "COM_MULTI", yyline+"", yychar+""));        return new Symbol(sym.COM_MULTI,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 21: 
            { listaTokens.add(new Tokens(yytext(), "PR_RES", yyline+"", yychar+""));         return new Symbol(sym.PR_RES, yyline, yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 22: 
            { listaTokens.add(new Tokens(yytext(), "PR_ARR", yyline+"", yychar+""));         return new Symbol(sym.PR_ARR, yyline, yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 23: 
            { listaTokens.add(new Tokens(yytext(), "PR_MOD", yyline+"", yychar+""));         return new Symbol(sym.PR_MOD, yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 24: 
            { listaTokens.add(new Tokens(yytext(), "PR_MAX", yyline+"", yychar+""));         return new Symbol(sym.PR_MAX, yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 25: 
            { listaTokens.add(new Tokens(yytext(), "PR_MUL", yyline+"", yychar+""));         return new Symbol(sym.PR_MUL, yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 26: 
            { listaTokens.add(new Tokens(yytext(), "PR_MIN", yyline+"", yychar+""));         return new Symbol(sym.PR_MIN, yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 27: 
            { listaTokens.add(new Tokens(yytext(), "PR_END", yyline+"", yychar+""));         return new Symbol(sym.PR_END, yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 28: 
            { listaTokens.add(new Tokens(yytext(), "PR_DIV", yyline+"", yychar+""));         return new Symbol(sym.PR_DIV, yyline, yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 29: 
            { listaTokens.add(new Tokens(yytext(), "PR_VAR", yyline+"", yychar+""));         return new Symbol(sym.PR_VAR, yyline, yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 30: 
            { listaTokens.add(new Tokens(yytext(), "PR_SUM", yyline+"", yychar+""));         return new Symbol(sym.PR_SUM, yyline, yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 31: 
            { listaTokens.add(new Tokens(yytext(), "PR_MODA", yyline+"", yychar+""));        return new Symbol(sym.PR_MODA, yyline, yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 32: 
            { listaTokens.add(new Tokens(yytext(), "PR_EXEC", yyline+"", yychar+""));        return new Symbol(sym.PR_EXEC, yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 33: 
            { listaTokens.add(new Tokens(yytext(), "PR_EJEX", yyline+"", yychar+""));        return new Symbol(sym.PR_EJEX, yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 34: 
            { listaTokens.add(new Tokens(yytext(), "PR_EJEY", yyline+"", yychar+""));        return new Symbol(sym.PR_EJEY, yyline, yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 35: 
            { listaTokens.add(new Tokens(yytext(), "PR_CHAR", yyline+"", yychar+""));        return new Symbol(sym.PR_CHAR, yyline, yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 36: 
            { listaTokens.add(new Tokens(yytext(), "PR_PRINT", yyline+"", yychar+""));       return new Symbol(sym.PR_PRINT, yyline, yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 37: 
            { listaTokens.add(new Tokens(yytext(), "PR_MEDIA", yyline+"", yychar+""));       return new Symbol(sym.PR_MEDIA, yyline, yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 38: 
            { listaTokens.add(new Tokens(yytext(), "PR_LABEL", yyline+"", yychar+""));       return new Symbol(sym.PR_LABEL, yyline, yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 39: 
            { listaTokens.add(new Tokens(yytext(), "PR_DOUBLE", yyline+"", yychar+""));      return new Symbol(sym.PR_DOUBLE, yyline, yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 40: 
            { listaTokens.add(new Tokens(yytext(), "PR_VALUES", yyline+"", yychar+""));      return new Symbol(sym.PR_VALUES, yyline, yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 41: 
            { listaTokens.add(new Tokens(yytext(), "PR_COLUMN", yyline+"", yychar+""));      return new Symbol(sym.PR_COLUMN, yyline, yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 42: 
            { listaTokens.add(new Tokens(yytext(), "PR_TITULO", yyline+"", yychar+""));      return new Symbol(sym.PR_TITULO, yyline, yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 43: 
            { listaTokens.add(new Tokens(yytext(), "PR_PROGRAM", yyline+"", yychar+""));     return new Symbol(sym.PR_PROGRAM, yyline, yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 44: 
            { listaTokens.add(new Tokens(yytext(), "PR_MEDIANA", yyline+"", yychar+""));     return new Symbol(sym.PR_MEDIANA, yyline, yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 45: 
            { listaTokens.add(new Tokens(yytext(), "PR_CONSOLE", yyline+"", yychar+""));     return new Symbol(sym.PR_CONSOLE, yyline, yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 46: 
            { listaTokens.add(new Tokens(yytext(), "PR_TITULOX", yyline+"", yychar+""));     return new Symbol(sym.PR_TITULOX, yyline, yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 47: 
            { listaTokens.add(new Tokens(yytext(), "PR_TITULOY", yyline+"", yychar+""));     return new Symbol(sym.PR_TITULOY, yyline, yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 48: 
            { listaTokens.add(new Tokens(yytext(), "PR_GRAPHPIE", yyline+"", yychar+""));    return new Symbol(sym.PR_GRAPHPIE, yyline, yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 49: 
            { listaTokens.add(new Tokens(yytext(), "PR_GRAPHBAR", yyline+"", yychar+""));    return new Symbol(sym.PR_GRAPHBAR, yyline, yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 50: 
            { listaTokens.add(new Tokens(yytext(), "PR_VARIANZA", yyline+"", yychar+""));    return new Symbol(sym.PR_VARIANZA, yyline, yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 51: 
            { listaTokens.add(new Tokens(yytext(), "PR_GRAPHLINE", yyline+"", yychar+""));   return new Symbol(sym.PR_GRAPHLINE, yyline, yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 52: 
            { listaTokens.add(new Tokens(yytext(), "PR_HISTOGRAM", yyline+"", yychar+""));   return new Symbol(sym.PR_HISTOGRAM, yyline, yychar, yytext());
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
