
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 65)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Clases.Errores;
import java.util.HashMap;
import proyecto1_compiladores1_2024.Funciones;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 65) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\007\000\002\003\006\000\002\003\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\004\015\000\002\004\020\000\002\021\002\000\002" +
    "\004\013\000\002\004\017\000\002\004\015\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\005\000\002\006\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\006\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\004\000\002\010\003\000\002\011" +
    "\002\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\010" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\014\077\000\002\015\077\000\002\016\053\000\002\017" +
    "\037\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\007\010\010\004\025\007\001\002\000" +
    "\034\002\uffbc\003\uffbc\007\uffbc\010\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\032\uffbc\046\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\001\002\000\004\002\u0180\001\002\000\012\002\ufffc" +
    "\007\ufffc\010\ufffc\025\ufffc\001\002\000\026\003\025\007" +
    "\010\010\004\027\021\032\027\046\017\052\032\053\014" +
    "\054\031\055\024\001\002\000\034\002\uffbd\003\uffbd\007" +
    "\uffbd\010\uffbd\025\uffbd\026\uffbd\027\uffbd\032\uffbd\046\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\001\002\000\012\002" +
    "\000\007\010\010\004\025\013\001\002\000\012\002\uffff" +
    "\007\uffff\010\uffff\025\uffff\001\002\000\026\003\025\007" +
    "\010\010\004\027\021\032\027\046\017\052\032\053\014" +
    "\054\031\055\024\001\002\000\004\011\u0141\001\002\000" +
    "\030\003\ufff0\007\ufff0\010\ufff0\026\ufff0\027\ufff0\032\ufff0" +
    "\046\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002\000" +
    "\030\003\uffee\007\uffee\010\uffee\026\uffee\027\uffee\032\uffee" +
    "\046\uffee\052\uffee\053\uffee\054\uffee\055\uffee\001\002\000" +
    "\004\024\u012c\001\002\000\030\003\ufff1\007\ufff1\010\ufff1" +
    "\026\ufff1\027\ufff1\032\ufff1\046\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\001\002\000\004\024\u011b\001\002\000\004" +
    "\026\u0119\001\002\000\030\003\025\007\010\010\004\026" +
    "\ufffa\027\021\032\027\046\017\052\032\053\014\054\031" +
    "\055\024\001\002\000\004\011\374\001\002\000\026\003" +
    "\025\007\010\010\004\027\021\032\027\046\017\052\032" +
    "\053\014\054\031\055\024\001\002\000\030\003\ufff2\007" +
    "\ufff2\010\ufff2\026\ufff2\027\ufff2\032\ufff2\046\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\001\002\000\004\024\352\001" +
    "\002\000\030\003\uffef\007\uffef\010\uffef\026\uffef\027\uffef" +
    "\032\uffef\046\uffef\052\uffef\053\uffef\054\uffef\055\uffef\001" +
    "\002\000\004\011\256\001\002\000\004\011\033\001\002" +
    "\000\004\064\034\001\002\000\004\024\035\001\002\000" +
    "\004\024\036\001\002\000\004\031\037\001\002\000\004" +
    "\013\040\001\002\000\004\014\041\001\002\000\004\016" +
    "\042\001\002\000\004\013\043\001\002\000\046\004\053" +
    "\005\065\006\056\014\uffd8\015\064\017\045\023\uffd8\033" +
    "\062\034\055\035\051\036\044\037\054\040\061\041\052" +
    "\042\063\043\046\044\050\045\047\001\002\000\004\011" +
    "\251\001\002\000\004\005\250\001\002\000\004\011\240" +
    "\001\002\000\004\011\230\001\002\000\004\011\220\001" +
    "\002\000\004\011\213\001\002\000\004\011\203\001\002" +
    "\000\010\014\uffdc\023\uffdc\026\uffdc\001\002\000\004\011" +
    "\176\001\002\000\004\011\171\001\002\000\010\014\uffdf" +
    "\023\uffdf\026\uffdf\001\002\000\010\014\uffd9\023\uffd9\026" +
    "\uffd9\001\002\000\010\014\uffdb\023\uffdb\026\uffdb\001\002" +
    "\000\004\011\161\001\002\000\004\011\146\001\002\000" +
    "\004\011\136\001\002\000\004\004\135\001\002\000\010" +
    "\014\uffdd\023\uffdd\026\uffdd\001\002\000\006\014\070\023" +
    "\067\001\002\000\046\004\131\005\130\006\127\014\uffd8" +
    "\017\126\023\uffd8\026\uffd8\033\062\034\055\035\051\036" +
    "\044\037\054\040\061\041\052\042\063\043\046\044\050" +
    "\045\047\001\002\000\004\026\071\001\002\000\004\022" +
    "\072\001\002\000\004\063\073\001\002\000\004\024\074" +
    "\001\002\000\004\024\075\001\002\000\004\030\076\001" +
    "\002\000\004\016\077\001\002\000\004\013\100\001\002" +
    "\000\046\004\053\005\065\006\056\014\uffd8\015\064\017" +
    "\045\023\uffd8\033\062\034\055\035\051\036\044\037\054" +
    "\040\061\041\052\042\063\043\046\044\050\045\047\001" +
    "\002\000\006\014\102\023\067\001\002\000\004\026\103" +
    "\001\002\000\004\022\104\001\002\000\004\056\105\001" +
    "\002\000\004\024\106\001\002\000\004\024\107\001\002" +
    "\000\004\031\110\001\002\000\004\013\111\001\002\000" +
    "\004\014\112\001\002\000\004\016\113\001\002\000\004" +
    "\006\114\001\002\000\004\026\115\001\002\000\004\022" +
    "\116\001\002\000\004\051\117\001\002\000\004\052\120" +
    "\001\002\000\004\026\121\001\002\000\004\022\122\001" +
    "\002\000\004\012\123\001\002\000\004\026\124\001\002" +
    "\000\004\022\125\001\002\000\030\003\uffbf\007\uffbf\010" +
    "\uffbf\026\uffbf\027\uffbf\032\uffbf\046\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\001\002\000\004\005\134\001\002\000" +
    "\010\014\uffe1\023\uffe1\026\uffe1\001\002\000\010\014\uffe2" +
    "\023\uffe2\026\uffe2\001\002\000\010\014\uffe0\023\uffe0\026" +
    "\uffe0\001\002\000\010\014\uffe4\023\uffe4\026\uffe4\001\002" +
    "\000\010\014\uffe5\023\uffe5\026\uffe5\001\002\000\010\014" +
    "\uffe3\023\uffe3\026\uffe3\001\002\000\010\014\uffda\023\uffda" +
    "\026\uffda\001\002\000\006\013\137\015\140\001\002\000" +
    "\046\004\053\005\065\006\056\014\uffd8\015\064\017\045" +
    "\023\uffd8\033\062\034\055\035\051\036\044\037\054\040" +
    "\061\041\052\042\063\043\046\044\050\045\047\001\002" +
    "\000\004\004\141\001\002\000\004\012\142\001\002\000" +
    "\014\012\uffc5\014\uffc5\017\uffc5\023\uffc5\026\uffc5\001\002" +
    "\000\006\014\144\023\067\001\002\000\004\012\145\001" +
    "\002\000\014\012\uffcb\014\uffcb\017\uffcb\023\uffcb\026\uffcb" +
    "\001\002\000\040\004\152\005\151\017\150\023\uffd8\033" +
    "\062\034\055\035\051\036\044\037\054\040\061\041\052" +
    "\042\063\043\046\044\050\045\047\001\002\000\004\023" +
    "\156\001\002\000\004\005\155\001\002\000\006\012\uffcf" +
    "\023\uffcf\001\002\000\006\012\uffce\023\uffce\001\002\000" +
    "\006\012\uffd2\023\uffd2\001\002\000\006\012\uffd1\023\uffd1" +
    "\001\002\000\006\012\uffd0\023\uffd0\001\002\000\040\004" +
    "\152\005\151\012\uffd8\017\150\033\062\034\055\035\051" +
    "\036\044\037\054\040\061\041\052\042\063\043\046\044" +
    "\050\045\047\001\002\000\004\012\160\001\002\000\014" +
    "\012\uffd7\014\uffd7\017\uffd7\023\uffd7\026\uffd7\001\002\000" +
    "\006\013\162\015\163\001\002\000\046\004\053\005\065" +
    "\006\056\014\uffd8\015\064\017\045\023\uffd8\033\062\034" +
    "\055\035\051\036\044\037\054\040\061\041\052\042\063" +
    "\043\046\044\050\045\047\001\002\000\004\004\164\001" +
    "\002\000\004\012\165\001\002\000\014\012\uffc7\014\uffc7" +
    "\017\uffc7\023\uffc7\026\uffc7\001\002\000\006\014\167\023" +
    "\067\001\002\000\004\012\170\001\002\000\014\012\uffcd" +
    "\014\uffcd\017\uffcd\023\uffcd\026\uffcd\001\002\000\040\004" +
    "\152\005\151\017\150\023\uffd8\033\062\034\055\035\051" +
    "\036\044\037\054\040\061\041\052\042\063\043\046\044" +
    "\050\045\047\001\002\000\004\023\173\001\002\000\040" +
    "\004\152\005\151\012\uffd8\017\150\033\062\034\055\035" +
    "\051\036\044\037\054\040\061\041\052\042\063\043\046" +
    "\044\050\045\047\001\002\000\004\012\175\001\002\000" +
    "\014\012\uffd6\014\uffd6\017\uffd6\023\uffd6\026\uffd6\001\002" +
    "\000\040\004\152\005\151\017\150\023\uffd8\033\062\034" +
    "\055\035\051\036\044\037\054\040\061\041\052\042\063" +
    "\043\046\044\050\045\047\001\002\000\004\023\200\001" +
    "\002\000\040\004\152\005\151\012\uffd8\017\150\033\062" +
    "\034\055\035\051\036\044\037\054\040\061\041\052\042" +
    "\063\043\046\044\050\045\047\001\002\000\004\012\202" +
    "\001\002\000\014\012\uffd3\014\uffd3\017\uffd3\023\uffd3\026" +
    "\uffd3\001\002\000\006\013\204\015\205\001\002\000\046" +
    "\004\053\005\065\006\056\014\uffd8\015\064\017\045\023" +
    "\uffd8\033\062\034\055\035\051\036\044\037\054\040\061" +
    "\041\052\042\063\043\046\044\050\045\047\001\002\000" +
    "\004\004\206\001\002\000\004\012\207\001\002\000\014" +
    "\012\uffc6\014\uffc6\017\uffc6\023\uffc6\026\uffc6\001\002\000" +
    "\006\014\211\023\067\001\002\000\004\012\212\001\002" +
    "\000\014\012\uffcc\014\uffcc\017\uffcc\023\uffcc\026\uffcc\001" +
    "\002\000\040\004\152\005\151\017\150\023\uffd8\033\062" +
    "\034\055\035\051\036\044\037\054\040\061\041\052\042" +
    "\063\043\046\044\050\045\047\001\002\000\004\023\215" +
    "\001\002\000\040\004\152\005\151\012\uffd8\017\150\033" +
    "\062\034\055\035\051\036\044\037\054\040\061\041\052" +
    "\042\063\043\046\044\050\045\047\001\002\000\004\012" +
    "\217\001\002\000\014\012\uffd5\014\uffd5\017\uffd5\023\uffd5" +
    "\026\uffd5\001\002\000\006\013\221\015\222\001\002\000" +
    "\046\004\053\005\065\006\056\014\uffd8\015\064\017\045" +
    "\023\uffd8\033\062\034\055\035\051\036\044\037\054\040" +
    "\061\041\052\042\063\043\046\044\050\045\047\001\002" +
    "\000\004\004\223\001\002\000\004\012\224\001\002\000" +
    "\014\012\uffc3\014\uffc3\017\uffc3\023\uffc3\026\uffc3\001\002" +
    "\000\006\014\226\023\067\001\002\000\004\012\227\001" +
    "\002\000\014\012\uffc9\014\uffc9\017\uffc9\023\uffc9\026\uffc9" +
    "\001\002\000\006\013\231\015\232\001\002\000\046\004" +
    "\053\005\065\006\056\014\uffd8\015\064\017\045\023\uffd8" +
    "\033\062\034\055\035\051\036\044\037\054\040\061\041" +
    "\052\042\063\043\046\044\050\045\047\001\002\000\004" +
    "\004\233\001\002\000\004\012\234\001\002\000\014\012" +
    "\uffc2\014\uffc2\017\uffc2\023\uffc2\026\uffc2\001\002\000\006" +
    "\014\236\023\067\001\002\000\004\012\237\001\002\000" +
    "\014\012\uffc8\014\uffc8\017\uffc8\023\uffc8\026\uffc8\001\002" +
    "\000\006\013\241\015\242\001\002\000\046\004\053\005" +
    "\065\006\056\014\uffd8\015\064\017\045\023\uffd8\033\062" +
    "\034\055\035\051\036\044\037\054\040\061\041\052\042" +
    "\063\043\046\044\050\045\047\001\002\000\004\004\243" +
    "\001\002\000\004\012\244\001\002\000\014\012\uffc4\014" +
    "\uffc4\017\uffc4\023\uffc4\026\uffc4\001\002\000\006\014\246" +
    "\023\067\001\002\000\004\012\247\001\002\000\014\012" +
    "\uffca\014\uffca\017\uffca\023\uffca\026\uffca\001\002\000\010" +
    "\014\uffde\023\uffde\026\uffde\001\002\000\040\004\152\005" +
    "\151\017\150\023\uffd8\033\062\034\055\035\051\036\044" +
    "\037\054\040\061\041\052\042\063\043\046\044\050\045" +
    "\047\001\002\000\004\023\253\001\002\000\040\004\152" +
    "\005\151\012\uffd8\017\150\033\062\034\055\035\051\036" +
    "\044\037\054\040\061\041\052\042\063\043\046\044\050" +
    "\045\047\001\002\000\004\012\255\001\002\000\014\012" +
    "\uffd4\014\uffd4\017\uffd4\023\uffd4\026\uffd4\001\002\000\004" +
    "\056\257\001\002\000\004\024\260\001\002\000\004\024" +
    "\261\001\002\000\004\031\262\001\002\000\004\013\263" +
    "\001\002\000\004\014\264\001\002\000\004\016\265\001" +
    "\002\000\004\006\266\001\002\000\004\026\267\001\002" +
    "\000\004\022\270\001\002\000\004\057\271\001\002\000" +
    "\004\024\272\001\002\000\004\024\273\001\002\000\004" +
    "\031\274\001\002\000\004\013\275\001\002\000\004\014" +
    "\276\001\002\000\004\016\277\001\002\000\004\013\300" +
    "\001\002\000\046\004\053\005\065\006\056\014\uffd8\015" +
    "\064\017\045\023\uffd8\033\062\034\055\035\051\036\044" +
    "\037\054\040\061\041\052\042\063\043\046\044\050\045" +
    "\047\001\002\000\006\014\302\023\067\001\002\000\004" +
    "\026\303\001\002\000\004\022\304\001\002\000\004\060" +
    "\305\001\002\000\004\024\306\001\002\000\004\024\307" +
    "\001\002\000\004\030\310\001\002\000\004\016\311\001" +
    "\002\000\004\013\312\001\002\000\046\004\053\005\065" +
    "\006\056\014\uffd8\015\064\017\045\023\uffd8\033\062\034" +
    "\055\035\051\036\044\037\054\040\061\041\052\042\063" +
    "\043\046\044\050\045\047\001\002\000\006\014\314\023" +
    "\067\001\002\000\004\026\315\001\002\000\004\022\316" +
    "\001\002\000\004\061\317\001\002\000\004\024\320\001" +
    "\002\000\004\024\321\001\002\000\004\031\322\001\002" +
    "\000\004\013\323\001\002\000\004\014\324\001\002\000" +
    "\004\016\325\001\002\000\004\006\326\001\002\000\004" +
    "\026\327\001\002\000\004\022\330\001\002\000\004\062" +
    "\331\001\002\000\004\024\332\001\002\000\004\024\333" +
    "\001\002\000\004\031\334\001\002\000\004\013\335\001" +
    "\002\000\004\014\336\001\002\000\004\016\337\001\002" +
    "\000\004\006\340\001\002\000\004\026\341\001\002\000" +
    "\004\022\342\001\002\000\004\051\343\001\002\000\004" +
    "\054\344\001\002\000\004\026\345\001\002\000\004\022" +
    "\346\001\002\000\004\012\347\001\002\000\004\026\350" +
    "\001\002\000\004\022\351\001\002\000\030\003\uffc1\007" +
    "\uffc1\010\uffc1\026\uffc1\027\uffc1\032\uffc1\046\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\001\002\000\006\030\355\031" +
    "\354\001\002\000\004\024\360\001\002\000\004\013\356" +
    "\001\002\000\004\024\uffe6\001\002\000\004\014\357\001" +
    "\002\000\004\024\uffe7\001\002\000\004\024\361\001\002" +
    "\000\004\015\362\001\002\000\004\004\363\001\002\000" +
    "\004\021\364\001\002\000\004\017\365\001\002\000\004" +
    "\013\366\001\002\000\046\004\053\005\065\006\056\014" +
    "\uffd8\015\064\017\045\023\uffd8\033\062\034\055\035\051" +
    "\036\044\037\054\040\061\041\052\042\063\043\046\044" +
    "\050\045\047\001\002\000\006\014\370\023\067\001\002" +
    "\000\004\026\371\001\002\000\004\022\372\001\002\000" +
    "\030\003\ufff7\007\ufff7\010\ufff7\026\ufff7\027\ufff7\032\ufff7" +
    "\046\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000" +
    "\004\026\ufff9\001\002\000\004\056\375\001\002\000\004" +
    "\024\376\001\002\000\004\024\377\001\002\000\004\031" +
    "\u0100\001\002\000\004\013\u0101\001\002\000\004\014\u0102" +
    "\001\002\000\004\016\u0103\001\002\000\004\006\u0104\001" +
    "\002\000\004\026\u0105\001\002\000\004\022\u0106\001\002" +
    "\000\004\063\u0107\001\002\000\004\024\u0108\001\002\000" +
    "\004\024\u0109\001\002\000\004\030\u010a\001\002\000\004" +
    "\016\u010b\001\002\000\004\013\u010c\001\002\000\046\004" +
    "\053\005\065\006\056\014\uffd8\015\064\017\045\023\uffd8" +
    "\033\062\034\055\035\051\036\044\037\054\040\061\041" +
    "\052\042\063\043\046\044\050\045\047\001\002\000\006" +
    "\014\u010e\023\067\001\002\000\004\026\u010f\001\002\000" +
    "\004\022\u0110\001\002\000\004\051\u0111\001\002\000\004" +
    "\055\u0112\001\002\000\004\026\u0113\001\002\000\004\022" +
    "\u0114\001\002\000\004\012\u0115\001\002\000\004\026\u0116" +
    "\001\002\000\004\022\u0117\001\002\000\030\003\uffbe\007" +
    "\uffbe\010\uffbe\026\uffbe\027\uffbe\032\uffbe\046\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\001\002\000\004\026\ufffb\001" +
    "\002\000\004\025\u011a\001\002\000\012\002\ufffe\007\ufffe" +
    "\010\ufffe\025\ufffe\001\002\000\006\030\355\031\354\001" +
    "\002\000\004\024\u011d\001\002\000\004\024\u011e\001\002" +
    "\000\004\004\u011f\001\002\000\004\021\u0120\001\002\000" +
    "\004\017\u0121\001\002\000\042\004\u0123\005\u0128\006\u0124" +
    "\017\u0122\026\uffd8\033\062\034\055\035\051\036\044\037" +
    "\054\040\061\041\052\042\063\043\046\044\050\045\047" +
    "\001\002\000\004\005\u012b\001\002\000\006\017\uffeb\026" +
    "\uffeb\001\002\000\006\017\uffea\026\uffea\001\002\000\006" +
    "\017\uffe8\026\uffe8\001\002\000\006\017\uffe9\026\uffe9\001" +
    "\002\000\004\026\u0129\001\002\000\006\017\uffec\026\uffec" +
    "\001\002\000\004\022\u012a\001\002\000\030\003\ufff8\007" +
    "\ufff8\010\ufff8\026\ufff8\027\ufff8\032\ufff8\046\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\001\002\000\006\017\uffed\026" +
    "\uffed\001\002\000\004\024\u012d\001\002\000\006\047\u012e" +
    "\050\u012f\001\002\000\004\016\ufff6\001\002\000\004\016" +
    "\u0130\001\002\000\040\004\u0123\005\u0128\006\u0124\017\u0122" +
    "\033\062\034\055\035\051\036\044\037\054\040\061\041" +
    "\052\042\063\043\046\044\050\045\047\001\002\000\004" +
    "\017\u0132\001\002\000\004\020\u0133\001\002\000\050\004" +
    "\053\005\065\006\056\013\u0134\015\064\017\045\023\uffd8" +
    "\026\uffd8\033\062\034\055\035\051\036\044\037\054\040" +
    "\061\041\052\042\063\043\046\044\050\045\047\001\002" +
    "\000\046\004\053\005\065\006\056\014\uffd8\015\064\017" +
    "\045\023\uffd8\033\062\034\055\035\051\036\044\037\054" +
    "\040\061\041\052\042\063\043\046\044\050\045\047\001" +
    "\002\000\006\023\067\026\u0136\001\002\000\004\022\u0137" +
    "\001\002\000\030\003\ufff3\007\ufff3\010\ufff3\026\ufff3\027" +
    "\ufff3\032\ufff3\046\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\001\002\000\006\014\u0139\023\067\001\002\000\004\026" +
    "\u013a\001\002\000\004\022\u013b\001\002\000\030\003\ufff4" +
    "\007\ufff4\010\ufff4\026\ufff4\027\ufff4\032\ufff4\046\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\001\002\000\004\016\u013d" +
    "\001\002\000\046\004\053\005\065\006\056\015\064\017" +
    "\045\023\uffd8\026\uffd8\033\062\034\055\035\051\036\044" +
    "\037\054\040\061\041\052\042\063\043\046\044\050\045" +
    "\047\001\002\000\006\023\067\026\u013f\001\002\000\004" +
    "\022\u0140\001\002\000\030\003\ufff5\007\ufff5\010\ufff5\026" +
    "\ufff5\027\ufff5\032\ufff5\046\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\001\002\000\004\056\u0142\001\002\000\004\024" +
    "\u0143\001\002\000\004\024\u0144\001\002\000\004\031\u0145" +
    "\001\002\000\004\013\u0146\001\002\000\004\014\u0147\001" +
    "\002\000\004\016\u0148\001\002\000\004\006\u0149\001\002" +
    "\000\004\026\u014a\001\002\000\004\022\u014b\001\002\000" +
    "\004\057\u014c\001\002\000\004\024\u014d\001\002\000\004" +
    "\024\u014e\001\002\000\004\031\u014f\001\002\000\004\013" +
    "\u0150\001\002\000\004\014\u0151\001\002\000\004\016\u0152" +
    "\001\002\000\004\013\u0153\001\002\000\046\004\053\005" +
    "\065\006\056\014\uffd8\015\064\017\045\023\uffd8\033\062" +
    "\034\055\035\051\036\044\037\054\040\061\041\052\042" +
    "\063\043\046\044\050\045\047\001\002\000\006\014\u0155" +
    "\023\067\001\002\000\004\026\u0156\001\002\000\004\022" +
    "\u0157\001\002\000\004\060\u0158\001\002\000\004\024\u0159" +
    "\001\002\000\004\024\u015a\001\002\000\004\030\u015b\001" +
    "\002\000\004\016\u015c\001\002\000\004\013\u015d\001\002" +
    "\000\046\004\053\005\065\006\056\014\uffd8\015\064\017" +
    "\045\023\uffd8\033\062\034\055\035\051\036\044\037\054" +
    "\040\061\041\052\042\063\043\046\044\050\045\047\001" +
    "\002\000\006\014\u015f\023\067\001\002\000\004\026\u0160" +
    "\001\002\000\004\022\u0161\001\002\000\004\061\u0162\001" +
    "\002\000\004\024\u0163\001\002\000\004\024\u0164\001\002" +
    "\000\004\031\u0165\001\002\000\004\013\u0166\001\002\000" +
    "\004\014\u0167\001\002\000\004\016\u0168\001\002\000\004" +
    "\006\u0169\001\002\000\004\026\u016a\001\002\000\004\022" +
    "\u016b\001\002\000\004\062\u016c\001\002\000\004\024\u016d" +
    "\001\002\000\004\024\u016e\001\002\000\004\031\u016f\001" +
    "\002\000\004\013\u0170\001\002\000\004\014\u0171\001\002" +
    "\000\004\016\u0172\001\002\000\004\006\u0173\001\002\000" +
    "\004\026\u0174\001\002\000\004\022\u0175\001\002\000\004" +
    "\051\u0176\001\002\000\004\053\u0177\001\002\000\004\026" +
    "\u0178\001\002\000\004\022\u0179\001\002\000\004\012\u017a" +
    "\001\002\000\004\026\u017b\001\002\000\004\022\u017c\001" +
    "\002\000\030\003\uffc0\007\uffc0\010\uffc0\026\uffc0\027\uffc0" +
    "\032\uffc0\046\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\001" +
    "\002\000\004\026\u017e\001\002\000\004\025\u017f\001\002" +
    "\000\012\002\ufffd\007\ufffd\010\ufffd\025\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\002\004\003\010\020\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u017c\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\004\020\011\001\001" +
    "\000\002\001\001\000\020\004\022\005\021\014\025\015" +
    "\017\016\014\017\027\020\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u0117\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\020\004\022\005\372" +
    "\014\025\015\017\016\014\017\027\020\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\065\011\057\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\131\013\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\100\011" +
    "\057\013\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\142\011" +
    "\057\013\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\152\012\146\013\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\152\012\156\013\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\165\011\057\013\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\152\012\171\013" +
    "\153\001\001\000\002\001\001\000\010\011\152\012\173" +
    "\013\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\152\012\176\013\153\001\001\000\002\001\001" +
    "\000\010\011\152\012\200\013\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\207" +
    "\011\057\013\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\152\012\213\013\153\001" +
    "\001\000\002\001\001\000\010\011\152\012\215\013\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\224\011\057\013\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\234\011\057\013\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\244\011\057\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\152\012\251\013\153\001\001\000\002\001\001\000" +
    "\010\011\152\012\253\013\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\300\011\057\013\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\312\011\057\013\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\366\011\057" +
    "\013\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u010c\011\057\013\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\u0126\011\u0125\013\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u013b\001\001\000\002\001" +
    "\001\000\010\007\u0130\011\u0125\013\u0124\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\u0134\011\057\013" +
    "\056\001\001\000\010\010\u0137\011\057\013\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\u013d\011\057\013" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\u0153" +
    "\011\057\013\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u015d\011\057\013\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public static int indent = 0;
    public static String traduccion = "";
    public static Object[] objetosTemp = new Object[10];


    public static HashMap<Object, Object> variablesDeclaradas = new HashMap<>(); 
    public static ArrayList<Object> listaDatosTemp = new ArrayList<>();

    // Guarda el error Sintactico
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //System.out.println("------------------------ Fin de Errores ----------------------------"); 
        listaErrores.add(new Errores("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
        //proyecto1_compi1.GUI.jTextArea2.setText("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

    } 


    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    // Reporta error sintactico inrecuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 

    }  
    

    public List<String> salidas = new ArrayList<String>();

    //Lista de errores
    public ArrayList<Errores> listaErrores = new ArrayList();

    public ArrayList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= codigo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= PR_VAR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ID MENOR_QUE MENOS valores PR_END PTCOMA 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		variablesDeclaradas.put(clave, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= PR_ARR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ARROBA ID MENOR_QUE MENOS COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		variablesDeclaradas.put(clave, Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
//limpio
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_PRINT NT$0 IGUAL valoresArreglo PR_END PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		//limpio
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE valoresArreglo PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= GraficaLineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= GraficaBarras 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= GraficaPie 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= GraficaHistograma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valores ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT="-"+val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valores ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valores ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=variablesDeclaradas.get(val); //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valores ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valores ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valores ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tiposVariables ::= PR_CHAR COR_IZQ COR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tiposVariables ::= PR_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valoresArreglo ::= valoresArreglo COMA funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valoresArreglo ::= valoresArreglo COMA operaciones 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valoresArreglo ::= valoresArreglo COMA MENOS DOUBLE 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add("-"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valoresArreglo ::= valoresArreglo COMA DOUBLE 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valoresArreglo ::= valoresArreglo COMA STRING 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valoresArreglo ::= valoresArreglo COMA ID 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valoresArreglo ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valoresArreglo ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add("-"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valoresArreglo ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valoresArreglo ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valoresArreglo ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valoresArreglo ::= ARROBA ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valoresArreglo ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones ::= PR_SUM PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "SUM");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones ::= PR_RES PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "RES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones ::= PR_MUL PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "MUL");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones ::= PR_DIV PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "DIV");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones ::= PR_MOD PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "MOD");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valoresOperaciones ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valoresOperaciones ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valoresOperaciones ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="-"+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valoresOperaciones ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valoresOperaciones ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=variablesDeclaradas.get(val); //System.out.println(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MEDIA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MEDIANA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcionesEstadisticas ::= PR_MODA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MODA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "VARIANZA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcionesEstadisticas ::= PR_MAX PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MAX");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcionesEstadisticas ::= PR_MIN PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MIN");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MEDIA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MEDIANA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcionesEstadisticas ::= PR_MODA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MODA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "VARIANZA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcionesEstadisticas ::= PR_MAX PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MAX");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcionesEstadisticas ::= PR_MIN PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MIN");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GraficaLineas ::= PR_GRAPHLINE PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHLINE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaLineas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-60)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GraficaBarras ::= PR_GRAPHBAR PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHBAR PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaBarras",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-60)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GraficaPie ::= PR_GRAPHPIE PAR_IZQ PR_LABEL DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHPIE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaPie",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GraficaHistograma ::= PR_HISTOGRAM PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EXEC PR_HISTOGRAM PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaHistograma",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-28)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comentarios ::= COM_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comentarios ::= COM_MULTI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
