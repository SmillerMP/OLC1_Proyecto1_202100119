
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 65)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Clases.Errores;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 65) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\004\005\000\002\004\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\002" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\003" +
    "\015\000\002\003\015\000\002\003\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\032\007\035\006\001\002\000\004\002" +
    "\000\001\002\000\004\002\170\001\002\000\004\026\140" +
    "\001\002\000\004\026\010\001\002\000\006\033\013\034" +
    "\012\001\002\000\004\026\016\001\002\000\004\015\014" +
    "\001\002\000\004\026\ufffa\001\002\000\004\016\015\001" +
    "\002\000\004\026\ufffb\001\002\000\004\026\017\001\002" +
    "\000\004\004\020\001\002\000\004\023\021\001\002\000" +
    "\004\021\022\001\002\000\040\004\034\005\031\010\030" +
    "\031\uffef\036\036\037\040\040\032\041\025\042\043\043" +
    "\024\044\027\045\041\046\026\047\042\050\033\001\002" +
    "\000\004\031\136\001\002\000\004\011\133\001\002\000" +
    "\004\011\126\001\002\000\004\011\123\001\002\000\004" +
    "\011\120\001\002\000\004\031\116\001\002\000\004\031" +
    "\uffff\001\002\000\004\011\111\001\002\000\004\011\106" +
    "\001\002\000\004\031\ufffe\001\002\000\004\031\ufffd\001" +
    "\002\000\004\011\101\001\002\000\004\031\ufffc\001\002" +
    "\000\004\011\074\001\002\000\004\011\071\001\002\000" +
    "\004\011\055\001\002\000\004\011\044\001\002\000\036" +
    "\004\047\005\046\025\uffef\036\036\037\040\040\032\041" +
    "\025\042\043\043\024\044\027\045\041\046\026\047\042" +
    "\050\033\001\002\000\004\025\052\001\002\000\006\012" +
    "\uffe7\025\uffe7\001\002\000\006\012\uffe6\025\uffe6\001\002" +
    "\000\006\012\uffe9\025\uffe9\001\002\000\006\012\uffe8\025" +
    "\uffe8\001\002\000\036\004\047\005\046\012\uffef\036\036" +
    "\037\040\040\032\041\025\042\043\043\024\044\027\045" +
    "\041\046\026\047\042\050\033\001\002\000\004\012\054" +
    "\001\002\000\012\012\uffea\016\uffea\025\uffea\031\uffea\001" +
    "\002\000\026\004\060\005\056\012\uffef\017\057\025\uffef" +
    "\036\036\037\040\040\032\041\025\042\043\001\002\000" +
    "\006\012\uffe2\025\uffe2\001\002\000\004\004\070\001\002" +
    "\000\006\012\uffe0\025\uffe0\001\002\000\006\012\uffdf\025" +
    "\uffdf\001\002\000\006\012\064\025\063\001\002\000\024" +
    "\004\065\005\066\012\uffef\025\uffef\036\036\037\040\040" +
    "\032\041\025\042\043\001\002\000\012\012\uffda\016\uffda" +
    "\025\uffda\031\uffda\001\002\000\006\012\uffe3\025\uffe3\001" +
    "\002\000\006\012\uffe4\025\uffe4\001\002\000\006\012\uffe5" +
    "\025\uffe5\001\002\000\006\012\uffe1\025\uffe1\001\002\000" +
    "\026\004\060\005\056\012\uffef\017\057\025\uffef\036\036" +
    "\037\040\040\032\041\025\042\043\001\002\000\006\012" +
    "\073\025\063\001\002\000\012\012\uffdc\016\uffdc\025\uffdc" +
    "\031\uffdc\001\002\000\036\004\047\005\046\025\uffef\036" +
    "\036\037\040\040\032\041\025\042\043\043\024\044\027" +
    "\045\041\046\026\047\042\050\033\001\002\000\004\025" +
    "\076\001\002\000\036\004\047\005\046\012\uffef\036\036" +
    "\037\040\040\032\041\025\042\043\043\024\044\027\045" +
    "\041\046\026\047\042\050\033\001\002\000\004\012\100" +
    "\001\002\000\012\012\uffed\016\uffed\025\uffed\031\uffed\001" +
    "\002\000\036\004\047\005\046\025\uffef\036\036\037\040" +
    "\040\032\041\025\042\043\043\024\044\027\045\041\046" +
    "\026\047\042\050\033\001\002\000\004\025\103\001\002" +
    "\000\036\004\047\005\046\012\uffef\036\036\037\040\040" +
    "\032\041\025\042\043\043\024\044\027\045\041\046\026" +
    "\047\042\050\033\001\002\000\004\012\105\001\002\000" +
    "\012\012\uffee\016\uffee\025\uffee\031\uffee\001\002\000\026" +
    "\004\060\005\056\012\uffef\017\057\025\uffef\036\036\037" +
    "\040\040\032\041\025\042\043\001\002\000\006\012\110" +
    "\025\063\001\002\000\012\012\uffd9\016\uffd9\025\uffd9\031" +
    "\uffd9\001\002\000\036\004\047\005\046\025\uffef\036\036" +
    "\037\040\040\032\041\025\042\043\043\024\044\027\045" +
    "\041\046\026\047\042\050\033\001\002\000\004\025\113" +
    "\001\002\000\036\004\047\005\046\012\uffef\036\036\037" +
    "\040\040\032\041\025\042\043\043\024\044\027\045\041" +
    "\046\026\047\042\050\033\001\002\000\004\012\115\001" +
    "\002\000\012\012\uffec\016\uffec\025\uffec\031\uffec\001\002" +
    "\000\004\024\117\001\002\000\004\002\uffd7\001\002\000" +
    "\026\004\060\005\056\012\uffef\017\057\025\uffef\036\036" +
    "\037\040\040\032\041\025\042\043\001\002\000\006\012" +
    "\122\025\063\001\002\000\012\012\uffdd\016\uffdd\025\uffdd" +
    "\031\uffdd\001\002\000\026\004\060\005\056\012\uffef\017" +
    "\057\025\uffef\036\036\037\040\040\032\041\025\042\043" +
    "\001\002\000\006\012\125\025\063\001\002\000\012\012" +
    "\uffdb\016\uffdb\025\uffdb\031\uffdb\001\002\000\036\004\047" +
    "\005\046\025\uffef\036\036\037\040\040\032\041\025\042" +
    "\043\043\024\044\027\045\041\046\026\047\042\050\033" +
    "\001\002\000\004\025\130\001\002\000\036\004\047\005" +
    "\046\012\uffef\036\036\037\040\040\032\041\025\042\043" +
    "\043\024\044\027\045\041\046\026\047\042\050\033\001" +
    "\002\000\004\012\132\001\002\000\012\012\uffeb\016\uffeb" +
    "\025\uffeb\031\uffeb\001\002\000\026\004\060\005\056\012" +
    "\uffef\017\057\025\uffef\036\036\037\040\040\032\041\025" +
    "\042\043\001\002\000\006\012\135\025\063\001\002\000" +
    "\012\012\uffde\016\uffde\025\uffde\031\uffde\001\002\000\004" +
    "\024\137\001\002\000\004\002\uffd8\001\002\000\006\033" +
    "\013\034\012\001\002\000\004\026\142\001\002\000\004" +
    "\026\143\001\002\000\004\017\144\001\002\000\004\004" +
    "\145\001\002\000\004\023\146\001\002\000\004\021\147" +
    "\001\002\000\004\015\150\001\002\000\042\004\154\005" +
    "\153\010\152\016\uffef\025\uffef\036\036\037\040\040\032" +
    "\041\025\042\043\043\024\044\027\045\041\046\026\047" +
    "\042\050\033\001\002\000\006\016\160\025\157\001\002" +
    "\000\006\016\ufff4\025\ufff4\001\002\000\006\016\ufff3\025" +
    "\ufff3\001\002\000\006\016\ufff2\025\ufff2\001\002\000\006" +
    "\016\ufff1\025\ufff1\001\002\000\006\016\ufff0\025\ufff0\001" +
    "\002\000\042\004\165\005\164\010\163\016\uffef\025\uffef" +
    "\036\036\037\040\040\032\041\025\042\043\043\024\044" +
    "\027\045\041\046\026\047\042\050\033\001\002\000\004" +
    "\031\161\001\002\000\004\024\162\001\002\000\004\002" +
    "\uffd6\001\002\000\006\016\ufff6\025\ufff6\001\002\000\006" +
    "\016\ufff7\025\ufff7\001\002\000\006\016\ufff5\025\ufff5\001" +
    "\002\000\006\016\ufff8\025\ufff8\001\002\000\006\016\ufff9" +
    "\025\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\022\007\034\011\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\047\010\044\011\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\047\010\052" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\060\012\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\060\012\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\047\010\074\011\050\001" +
    "\001\000\002\001\001\000\010\007\047\010\076\011\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\047\010\101\011\050\001\001\000\002\001\001\000\010" +
    "\007\047\010\103\011\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\060\012\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\047\010\111\011" +
    "\050\001\001\000\002\001\001\000\010\007\047\010\113" +
    "\011\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\060\012\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\060\012\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\047\010\126\011\050\001\001\000\002\001" +
    "\001\000\010\007\047\010\130\011\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\060\012\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\150\007\154\011\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\165\011\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public static int indent = 0;
    public static String traduccion = "";

    HashMap<Object, Object> mapa_globales = new HashMap<>();

    // Guarda el error Sintactico
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //System.out.println("------------------------ Fin de Errores ----------------------------"); 
        listaErrores.add(new Errores("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
        //proyecto1_compi1.GUI.jTextArea2.setText("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

    } 


    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    // Reporta error sintactico inrecuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 

    }  
    

    public List<String> salidas = new ArrayList<String>();

    //Lista de errores
    public ArrayList<Errores> listaErrores = new ArrayList();

    public ArrayList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // valores ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // valores ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valores ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valores ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tiposVariables ::= PR_CHAR COR_IZQ COR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tiposVariables ::= PR_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valoresArreglo ::= valoresArreglo COMA funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valoresArreglo ::= valoresArreglo COMA operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valoresArreglo ::= valoresArreglo COMA DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valoresArreglo ::= valoresArreglo COMA STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valoresArreglo ::= valoresArreglo COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valoresArreglo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valoresArreglo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valoresArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valoresArreglo ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valoresArreglo ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operaciones ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operaciones ::= PR_SUM PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operaciones ::= PR_RES PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operaciones ::= PR_MUL PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones ::= PR_DIV PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones ::= PR_MOD PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valoresOperaciones ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valoresOperaciones ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valoresOperaciones ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valoresOperaciones ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valoresArregloFunc ::= valoresArregloFunc COMA operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valoresArregloFunc ::= valoresArregloFunc COMA DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valoresArregloFunc ::= valoresArregloFunc COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valoresArregloFunc ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valoresArregloFunc ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valoresArregloFunc ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valoresArregloFunc ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArregloFunc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcionesEstadisticas ::= PR_MODA PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcionesEstadisticas ::= PR_MAX PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcionesEstadisticas ::= PR_MIN PAR_IZQ valoresArregloFunc PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaraciones ::= PR_VAR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ID MENOR_QUE MENOS valores PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaraciones ::= PR_VAR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ID MENOR_QUE MENOS STRING PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaraciones ::= PR_ARR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ARROBA ID MENOR_QUE MENOS COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
