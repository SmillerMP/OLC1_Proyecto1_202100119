
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 65)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Clases.Errores;
import java.util.HashMap;
import proyecto1_compiladores1_2024.Funciones;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 65) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\007\000\002\003\006\000\002\003\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\004\015\000\002\004\020\000\002\004\012\000\002" +
    "\004\017\000\002\004\016\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\006\005\000\002\006\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\006\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\002\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\012\003\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\003\000\002" +
    "\013\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\014\014\000\002" +
    "\015\014\000\002\016\014\000\002\017\014\000\002\021" +
    "\014\000\002\021\014\000\002\021\016\000\002\021\015" +
    "\000\002\021\014\000\002\021\013\000\002\021\014\000" +
    "\002\021\014\000\002\021\014\000\002\021\014\000\002" +
    "\021\016\000\002\021\014\000\002\021\016\000\002\021" +
    "\013\000\002\021\003\000\002\022\004\000\002\022\003" +
    "\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\010\007\010\010\004\025\007\001\002\000" +
    "\054\002\uffac\003\uffac\007\uffac\010\uffac\025\uffac\026\uffac" +
    "\027\uffac\032\uffac\046\uffac\051\uffac\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\001\002\000\004\002\u0153\001\002\000" +
    "\012\002\ufffc\007\ufffc\010\ufffc\025\ufffc\001\002\000\026" +
    "\003\025\007\010\010\004\027\021\032\027\046\017\052" +
    "\032\053\014\054\031\055\024\001\002\000\054\002\uffad" +
    "\003\uffad\007\uffad\010\uffad\025\uffad\026\uffad\027\uffad\032" +
    "\uffad\046\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064" +
    "\uffad\001\002\000\012\002\000\007\010\010\004\025\013" +
    "\001\002\000\012\002\uffff\007\uffff\010\uffff\025\uffff\001" +
    "\002\000\026\003\025\007\010\010\004\027\021\032\027" +
    "\046\017\052\032\053\014\054\031\055\024\001\002\000" +
    "\004\011\u0147\001\002\000\030\003\ufff1\007\ufff1\010\ufff1" +
    "\026\ufff1\027\ufff1\032\ufff1\046\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\001\002\000\030\003\uffef\007\uffef\010\uffef" +
    "\026\uffef\027\uffef\032\uffef\046\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\001\002\000\004\024\u0132\001\002\000\030" +
    "\003\ufff2\007\ufff2\010\ufff2\026\ufff2\027\ufff2\032\ufff2\046" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\001\002\000\004" +
    "\024\u0121\001\002\000\004\026\u011f\001\002\000\030\003" +
    "\025\007\010\010\004\026\ufffa\027\021\032\027\046\017" +
    "\052\032\053\014\054\031\055\024\001\002\000\004\011" +
    "\u0115\001\002\000\026\003\025\007\010\010\004\027\021" +
    "\032\027\046\017\052\032\053\014\054\031\055\024\001" +
    "\002\000\030\003\ufff3\007\ufff3\010\ufff3\026\ufff3\027\ufff3" +
    "\032\ufff3\046\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\001" +
    "\002\000\004\024\u0103\001\002\000\030\003\ufff0\007\ufff0" +
    "\010\ufff0\026\ufff0\027\ufff0\032\ufff0\046\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\001\002\000\004\011\372\001\002" +
    "\000\004\011\033\001\002\000\024\007\010\010\004\056" +
    "\040\057\042\060\041\061\045\062\044\063\036\064\043" +
    "\001\002\000\004\051\363\001\002\000\026\007\uffb0\010" +
    "\uffb0\051\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\001\002\000\004\024\335\001\002\000" +
    "\026\007\010\010\004\051\uffae\056\040\057\042\060\041" +
    "\061\045\062\044\063\036\064\043\001\002\000\004\024" +
    "\320\001\002\000\004\024\303\001\002\000\004\024\264" +
    "\001\002\000\004\024\076\001\002\000\004\024\062\001" +
    "\002\000\004\024\046\001\002\000\004\024\047\001\002" +
    "\000\004\031\050\001\002\000\004\013\051\001\002\000" +
    "\004\014\052\001\002\000\004\016\053\001\002\000\006" +
    "\004\054\006\055\001\002\000\004\026\060\001\002\000" +
    "\004\026\056\001\002\000\004\022\057\001\002\000\026" +
    "\007\uffb8\010\uffb8\051\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\004\022\061" +
    "\001\002\000\026\007\uffb7\010\uffb7\051\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002" +
    "\000\004\024\063\001\002\000\004\031\064\001\002\000" +
    "\004\013\065\001\002\000\004\014\066\001\002\000\004" +
    "\016\067\001\002\000\006\004\070\006\071\001\002\000" +
    "\004\026\074\001\002\000\004\026\072\001\002\000\004" +
    "\022\073\001\002\000\026\007\uffb6\010\uffb6\051\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\001\002\000\004\022\075\001\002\000\026\007\uffb5\010" +
    "\uffb5\051\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\001\002\000\004\024\077\001\002\000" +
    "\004\031\100\001\002\000\004\013\101\001\002\000\004" +
    "\014\102\001\002\000\004\016\103\001\002\000\004\013" +
    "\104\001\002\000\046\004\114\005\126\006\117\014\uffd9" +
    "\015\125\017\106\023\uffd9\033\123\034\116\035\112\036" +
    "\105\037\115\040\122\041\113\042\124\043\107\044\111" +
    "\045\110\001\002\000\004\011\257\001\002\000\004\005" +
    "\256\001\002\000\004\011\246\001\002\000\004\011\236" +
    "\001\002\000\004\011\226\001\002\000\004\011\221\001" +
    "\002\000\004\011\211\001\002\000\010\014\uffdd\023\uffdd" +
    "\026\uffdd\001\002\000\004\011\204\001\002\000\004\011" +
    "\177\001\002\000\010\014\uffe0\023\uffe0\026\uffe0\001\002" +
    "\000\010\014\uffda\023\uffda\026\uffda\001\002\000\010\014" +
    "\uffdc\023\uffdc\026\uffdc\001\002\000\004\011\167\001\002" +
    "\000\004\011\154\001\002\000\004\011\144\001\002\000" +
    "\004\004\143\001\002\000\010\014\uffde\023\uffde\026\uffde" +
    "\001\002\000\006\014\131\023\130\001\002\000\046\004" +
    "\137\005\136\006\135\014\uffd9\017\134\023\uffd9\026\uffd9" +
    "\033\123\034\116\035\112\036\105\037\115\040\122\041" +
    "\113\042\124\043\107\044\111\045\110\001\002\000\004" +
    "\026\132\001\002\000\004\022\133\001\002\000\026\007" +
    "\uffb4\010\uffb4\051\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\001\002\000\004\005\142\001" +
    "\002\000\010\014\uffe2\023\uffe2\026\uffe2\001\002\000\010" +
    "\014\uffe3\023\uffe3\026\uffe3\001\002\000\010\014\uffe1\023" +
    "\uffe1\026\uffe1\001\002\000\010\014\uffe5\023\uffe5\026\uffe5" +
    "\001\002\000\010\014\uffe6\023\uffe6\026\uffe6\001\002\000" +
    "\010\014\uffe4\023\uffe4\026\uffe4\001\002\000\010\014\uffdb" +
    "\023\uffdb\026\uffdb\001\002\000\006\013\145\015\146\001" +
    "\002\000\046\004\114\005\126\006\117\014\uffd9\015\125" +
    "\017\106\023\uffd9\033\123\034\116\035\112\036\105\037" +
    "\115\040\122\041\113\042\124\043\107\044\111\045\110" +
    "\001\002\000\004\004\147\001\002\000\004\012\150\001" +
    "\002\000\014\012\uffc6\014\uffc6\017\uffc6\023\uffc6\026\uffc6" +
    "\001\002\000\006\014\152\023\130\001\002\000\004\012" +
    "\153\001\002\000\014\012\uffcc\014\uffcc\017\uffcc\023\uffcc" +
    "\026\uffcc\001\002\000\040\004\160\005\157\017\156\023" +
    "\uffd9\033\123\034\116\035\112\036\105\037\115\040\122" +
    "\041\113\042\124\043\107\044\111\045\110\001\002\000" +
    "\004\023\164\001\002\000\004\005\163\001\002\000\006" +
    "\012\uffd0\023\uffd0\001\002\000\006\012\uffcf\023\uffcf\001" +
    "\002\000\006\012\uffd3\023\uffd3\001\002\000\006\012\uffd2" +
    "\023\uffd2\001\002\000\006\012\uffd1\023\uffd1\001\002\000" +
    "\040\004\160\005\157\012\uffd9\017\156\033\123\034\116" +
    "\035\112\036\105\037\115\040\122\041\113\042\124\043" +
    "\107\044\111\045\110\001\002\000\004\012\166\001\002" +
    "\000\014\012\uffd8\014\uffd8\017\uffd8\023\uffd8\026\uffd8\001" +
    "\002\000\006\013\170\015\171\001\002\000\046\004\114" +
    "\005\126\006\117\014\uffd9\015\125\017\106\023\uffd9\033" +
    "\123\034\116\035\112\036\105\037\115\040\122\041\113" +
    "\042\124\043\107\044\111\045\110\001\002\000\004\004" +
    "\172\001\002\000\004\012\173\001\002\000\014\012\uffc8" +
    "\014\uffc8\017\uffc8\023\uffc8\026\uffc8\001\002\000\006\014" +
    "\175\023\130\001\002\000\004\012\176\001\002\000\014" +
    "\012\uffce\014\uffce\017\uffce\023\uffce\026\uffce\001\002\000" +
    "\040\004\160\005\157\017\156\023\uffd9\033\123\034\116" +
    "\035\112\036\105\037\115\040\122\041\113\042\124\043" +
    "\107\044\111\045\110\001\002\000\004\023\201\001\002" +
    "\000\040\004\160\005\157\012\uffd9\017\156\033\123\034" +
    "\116\035\112\036\105\037\115\040\122\041\113\042\124" +
    "\043\107\044\111\045\110\001\002\000\004\012\203\001" +
    "\002\000\014\012\uffd7\014\uffd7\017\uffd7\023\uffd7\026\uffd7" +
    "\001\002\000\040\004\160\005\157\017\156\023\uffd9\033" +
    "\123\034\116\035\112\036\105\037\115\040\122\041\113" +
    "\042\124\043\107\044\111\045\110\001\002\000\004\023" +
    "\206\001\002\000\040\004\160\005\157\012\uffd9\017\156" +
    "\033\123\034\116\035\112\036\105\037\115\040\122\041" +
    "\113\042\124\043\107\044\111\045\110\001\002\000\004" +
    "\012\210\001\002\000\014\012\uffd4\014\uffd4\017\uffd4\023" +
    "\uffd4\026\uffd4\001\002\000\006\013\212\015\213\001\002" +
    "\000\046\004\114\005\126\006\117\014\uffd9\015\125\017" +
    "\106\023\uffd9\033\123\034\116\035\112\036\105\037\115" +
    "\040\122\041\113\042\124\043\107\044\111\045\110\001" +
    "\002\000\004\004\214\001\002\000\004\012\215\001\002" +
    "\000\014\012\uffc7\014\uffc7\017\uffc7\023\uffc7\026\uffc7\001" +
    "\002\000\006\014\217\023\130\001\002\000\004\012\220" +
    "\001\002\000\014\012\uffcd\014\uffcd\017\uffcd\023\uffcd\026" +
    "\uffcd\001\002\000\040\004\160\005\157\017\156\023\uffd9" +
    "\033\123\034\116\035\112\036\105\037\115\040\122\041" +
    "\113\042\124\043\107\044\111\045\110\001\002\000\004" +
    "\023\223\001\002\000\040\004\160\005\157\012\uffd9\017" +
    "\156\033\123\034\116\035\112\036\105\037\115\040\122" +
    "\041\113\042\124\043\107\044\111\045\110\001\002\000" +
    "\004\012\225\001\002\000\014\012\uffd6\014\uffd6\017\uffd6" +
    "\023\uffd6\026\uffd6\001\002\000\006\013\227\015\230\001" +
    "\002\000\046\004\114\005\126\006\117\014\uffd9\015\125" +
    "\017\106\023\uffd9\033\123\034\116\035\112\036\105\037" +
    "\115\040\122\041\113\042\124\043\107\044\111\045\110" +
    "\001\002\000\004\004\231\001\002\000\004\012\232\001" +
    "\002\000\014\012\uffc4\014\uffc4\017\uffc4\023\uffc4\026\uffc4" +
    "\001\002\000\006\014\234\023\130\001\002\000\004\012" +
    "\235\001\002\000\014\012\uffca\014\uffca\017\uffca\023\uffca" +
    "\026\uffca\001\002\000\006\013\237\015\240\001\002\000" +
    "\046\004\114\005\126\006\117\014\uffd9\015\125\017\106" +
    "\023\uffd9\033\123\034\116\035\112\036\105\037\115\040" +
    "\122\041\113\042\124\043\107\044\111\045\110\001\002" +
    "\000\004\004\241\001\002\000\004\012\242\001\002\000" +
    "\014\012\uffc3\014\uffc3\017\uffc3\023\uffc3\026\uffc3\001\002" +
    "\000\006\014\244\023\130\001\002\000\004\012\245\001" +
    "\002\000\014\012\uffc9\014\uffc9\017\uffc9\023\uffc9\026\uffc9" +
    "\001\002\000\006\013\247\015\250\001\002\000\046\004" +
    "\114\005\126\006\117\014\uffd9\015\125\017\106\023\uffd9" +
    "\033\123\034\116\035\112\036\105\037\115\040\122\041" +
    "\113\042\124\043\107\044\111\045\110\001\002\000\004" +
    "\004\251\001\002\000\004\012\252\001\002\000\014\012" +
    "\uffc5\014\uffc5\017\uffc5\023\uffc5\026\uffc5\001\002\000\006" +
    "\014\254\023\130\001\002\000\004\012\255\001\002\000" +
    "\014\012\uffcb\014\uffcb\017\uffcb\023\uffcb\026\uffcb\001\002" +
    "\000\010\014\uffdf\023\uffdf\026\uffdf\001\002\000\040\004" +
    "\160\005\157\017\156\023\uffd9\033\123\034\116\035\112" +
    "\036\105\037\115\040\122\041\113\042\124\043\107\044" +
    "\111\045\110\001\002\000\004\023\261\001\002\000\040" +
    "\004\160\005\157\012\uffd9\017\156\033\123\034\116\035" +
    "\112\036\105\037\115\040\122\041\113\042\124\043\107" +
    "\044\111\045\110\001\002\000\004\012\263\001\002\000" +
    "\014\012\uffd5\014\uffd5\017\uffd5\023\uffd5\026\uffd5\001\002" +
    "\000\004\024\265\001\002\000\004\031\266\001\002\000" +
    "\004\013\267\001\002\000\004\014\270\001\002\000\004" +
    "\016\271\001\002\000\006\013\272\015\273\001\002\000" +
    "\046\004\114\005\126\006\117\014\uffd9\015\125\017\106" +
    "\023\uffd9\033\123\034\116\035\112\036\105\037\115\040" +
    "\122\041\113\042\124\043\107\044\111\045\110\001\002" +
    "\000\004\004\274\001\002\000\004\026\275\001\002\000" +
    "\004\022\276\001\002\000\026\007\uffbb\010\uffbb\051\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\001\002\000\006\014\300\023\130\001\002\000\004" +
    "\026\301\001\002\000\004\022\302\001\002\000\026\007" +
    "\uffbc\010\uffbc\051\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\001\002\000\004\024\304\001" +
    "\002\000\004\030\305\001\002\000\004\016\306\001\002" +
    "\000\006\013\307\015\310\001\002\000\046\004\114\005" +
    "\126\006\117\014\uffd9\015\125\017\106\023\uffd9\033\123" +
    "\034\116\035\112\036\105\037\115\040\122\041\113\042" +
    "\124\043\107\044\111\045\110\001\002\000\004\004\311" +
    "\001\002\000\004\026\312\001\002\000\004\022\313\001" +
    "\002\000\026\007\uffb9\010\uffb9\051\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000" +
    "\006\014\315\023\130\001\002\000\004\026\316\001\002" +
    "\000\004\022\317\001\002\000\026\007\uffba\010\uffba\051" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\001\002\000\004\024\321\001\002\000\004\031" +
    "\322\001\002\000\004\013\323\001\002\000\004\014\324" +
    "\001\002\000\004\016\325\001\002\000\006\004\326\006" +
    "\327\001\002\000\004\026\332\001\002\000\004\026\330" +
    "\001\002\000\004\022\331\001\002\000\026\007\uffbe\010" +
    "\uffbe\051\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\001\002\000\004\022\333\001\002\000" +
    "\026\007\uffbd\010\uffbd\051\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002\000\004\051" +
    "\uffaf\001\002\000\004\024\336\001\002\000\006\030\340" +
    "\031\337\001\002\000\004\013\353\001\002\000\004\016" +
    "\341\001\002\000\006\013\342\015\343\001\002\000\046" +
    "\004\114\005\126\006\117\014\uffd9\015\125\017\106\023" +
    "\uffd9\033\123\034\116\035\112\036\105\037\115\040\122" +
    "\041\113\042\124\043\107\044\111\045\110\001\002\000" +
    "\004\004\344\001\002\000\004\026\345\001\002\000\004" +
    "\022\346\001\002\000\026\007\uffb1\010\uffb1\051\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\006\014\350\023\130\001\002\000\004\026" +
    "\351\001\002\000\004\022\352\001\002\000\026\007\uffb3" +
    "\010\uffb3\051\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\001\002\000\004\014\354\001\002" +
    "\000\004\016\355\001\002\000\004\013\356\001\002\000" +
    "\046\004\114\005\126\006\117\014\uffd9\015\125\017\106" +
    "\023\uffd9\033\123\034\116\035\112\036\105\037\115\040" +
    "\122\041\113\042\124\043\107\044\111\045\110\001\002" +
    "\000\006\014\360\023\130\001\002\000\004\026\361\001" +
    "\002\000\004\022\362\001\002\000\026\007\uffb2\010\uffb2" +
    "\051\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\001\002\000\004\052\364\001\002\000\004" +
    "\026\365\001\002\000\004\022\366\001\002\000\004\012" +
    "\367\001\002\000\004\026\370\001\002\000\004\022\371" +
    "\001\002\000\030\003\uffc0\007\uffc0\010\uffc0\026\uffc0\027" +
    "\uffc0\032\uffc0\046\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\001\002\000\024\007\010\010\004\056\040\057\042\060" +
    "\041\061\045\062\044\063\036\064\043\001\002\000\004" +
    "\051\374\001\002\000\004\054\375\001\002\000\004\026" +
    "\376\001\002\000\004\022\377\001\002\000\004\012\u0100" +
    "\001\002\000\004\026\u0101\001\002\000\004\022\u0102\001" +
    "\002\000\030\003\uffc2\007\uffc2\010\uffc2\026\uffc2\027\uffc2" +
    "\032\uffc2\046\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001" +
    "\002\000\006\030\u0106\031\u0105\001\002\000\004\024\u0109" +
    "\001\002\000\004\013\u0107\001\002\000\004\024\uffe7\001" +
    "\002\000\004\014\u0108\001\002\000\004\024\uffe8\001\002" +
    "\000\004\024\u010a\001\002\000\004\015\u010b\001\002\000" +
    "\004\004\u010c\001\002\000\004\021\u010d\001\002\000\004" +
    "\017\u010e\001\002\000\004\013\u010f\001\002\000\046\004" +
    "\114\005\126\006\117\014\uffd9\015\125\017\106\023\uffd9" +
    "\033\123\034\116\035\112\036\105\037\115\040\122\041" +
    "\113\042\124\043\107\044\111\045\110\001\002\000\006" +
    "\014\u0111\023\130\001\002\000\004\026\u0112\001\002\000" +
    "\004\022\u0113\001\002\000\030\003\ufff7\007\ufff7\010\ufff7" +
    "\026\ufff7\027\ufff7\032\ufff7\046\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\001\002\000\004\026\ufff9\001\002\000\024" +
    "\007\010\010\004\056\040\057\042\060\041\061\045\062" +
    "\044\063\036\064\043\001\002\000\004\051\u0117\001\002" +
    "\000\004\055\u0118\001\002\000\004\026\u0119\001\002\000" +
    "\004\022\u011a\001\002\000\004\012\u011b\001\002\000\004" +
    "\026\u011c\001\002\000\004\022\u011d\001\002\000\030\003" +
    "\uffbf\007\uffbf\010\uffbf\026\uffbf\027\uffbf\032\uffbf\046\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\001\002\000\004\026" +
    "\ufffb\001\002\000\004\025\u0120\001\002\000\012\002\ufffe" +
    "\007\ufffe\010\ufffe\025\ufffe\001\002\000\006\030\u0106\031" +
    "\u0105\001\002\000\004\024\u0123\001\002\000\004\024\u0124" +
    "\001\002\000\004\004\u0125\001\002\000\004\021\u0126\001" +
    "\002\000\004\017\u0127\001\002\000\042\004\u0129\005\u012e" +
    "\006\u012a\017\u0128\026\uffd9\033\123\034\116\035\112\036" +
    "\105\037\115\040\122\041\113\042\124\043\107\044\111" +
    "\045\110\001\002\000\004\005\u0131\001\002\000\006\017" +
    "\uffec\026\uffec\001\002\000\006\017\uffeb\026\uffeb\001\002" +
    "\000\006\017\uffe9\026\uffe9\001\002\000\006\017\uffea\026" +
    "\uffea\001\002\000\004\026\u012f\001\002\000\006\017\uffed" +
    "\026\uffed\001\002\000\004\022\u0130\001\002\000\030\003" +
    "\ufff8\007\ufff8\010\ufff8\026\ufff8\027\ufff8\032\ufff8\046\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002\000\006\017" +
    "\uffee\026\uffee\001\002\000\004\024\u0133\001\002\000\006" +
    "\047\u0134\050\u0135\001\002\000\004\016\u0143\001\002\000" +
    "\004\016\u0136\001\002\000\040\004\u0129\005\u012e\006\u012a" +
    "\017\u0128\033\123\034\116\035\112\036\105\037\115\040" +
    "\122\041\113\042\124\043\107\044\111\045\110\001\002" +
    "\000\004\017\u0138\001\002\000\004\020\u0139\001\002\000" +
    "\006\013\u013a\015\u013b\001\002\000\046\004\114\005\126" +
    "\006\117\014\uffd9\015\125\017\106\023\uffd9\033\123\034" +
    "\116\035\112\036\105\037\115\040\122\041\113\042\124" +
    "\043\107\044\111\045\110\001\002\000\004\004\u013c\001" +
    "\002\000\004\026\u013d\001\002\000\004\022\u013e\001\002" +
    "\000\030\003\ufff4\007\ufff4\010\ufff4\026\ufff4\027\ufff4\032" +
    "\ufff4\046\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\001\002" +
    "\000\006\014\u0140\023\130\001\002\000\004\026\u0141\001" +
    "\002\000\004\022\u0142\001\002\000\030\003\ufff5\007\ufff5" +
    "\010\ufff5\026\ufff5\027\ufff5\032\ufff5\046\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\001\002\000\046\004\114\005\126" +
    "\006\117\015\125\017\106\023\uffd9\026\uffd9\033\123\034" +
    "\116\035\112\036\105\037\115\040\122\041\113\042\124" +
    "\043\107\044\111\045\110\001\002\000\006\023\130\026" +
    "\u0145\001\002\000\004\022\u0146\001\002\000\030\003\ufff6" +
    "\007\ufff6\010\ufff6\026\ufff6\027\ufff6\032\ufff6\046\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\024\007\010" +
    "\010\004\056\040\057\042\060\041\061\045\062\044\063" +
    "\036\064\043\001\002\000\004\051\u0149\001\002\000\004" +
    "\053\u014a\001\002\000\004\026\u014b\001\002\000\004\022" +
    "\u014c\001\002\000\004\012\u014d\001\002\000\004\026\u014e" +
    "\001\002\000\004\022\u014f\001\002\000\030\003\uffc1\007" +
    "\uffc1\010\uffc1\026\uffc1\027\uffc1\032\uffc1\046\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\001\002\000\004\026\u0151\001" +
    "\002\000\004\025\u0152\001\002\000\012\002\ufffd\007\ufffd" +
    "\010\ufffd\025\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\010\002\004\003\010\020\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u014f\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\004\020\011\001\001" +
    "\000\002\001\001\000\020\004\022\005\021\014\025\015" +
    "\017\016\014\017\027\020\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u011d\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\020\004\022\005\u0113" +
    "\014\025\015\017\016\014\017\027\020\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\034\021\036\022" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\034\021\036\022\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\126\011\120\013\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\137\013" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\150\011\120\013\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\160\012\154" +
    "\013\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\160\012\164\013" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\173\011\120\013\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\160\012\177\013\161\001\001\000\002\001\001\000\010" +
    "\011\160\012\201\013\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\160\012\204\013\161\001\001" +
    "\000\002\001\001\000\010\011\160\012\206\013\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\215\011\120\013\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\160\012" +
    "\221\013\161\001\001\000\002\001\001\000\010\011\160" +
    "\012\223\013\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\232\011\120\013\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\242\011\120\013\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\252\011\120\013\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\160\012\257\013\161\001\001\000" +
    "\002\001\001\000\010\011\160\012\261\013\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\276\011\120\013" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\313\011\120\013\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\346" +
    "\011\120\013\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\356\011\120\013\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\034\021\036\022\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\u010f\011\120\013\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\034\021\036\022\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\u012c\011\u012b" +
    "\013\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\u0136\011" +
    "\u012b\013\u012a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u013e\011\120\013\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u0143\011\120" +
    "\013\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\034\021\036\022\u0147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public static int indent = 0;
    public static String traduccion = "";
    public static Object[] objetosTemp = new Object[10];

    public static HashMap<Object, Object> variablesDeclaradas = new HashMap<>(); 
    public static HashMap<Object, Object> datosGraficas = new HashMap<>();
    public static ArrayList<Object> listaDatosTemp = new ArrayList<>();

    // Guarda el error Sintactico
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //System.out.println("------------------------ Fin de Errores ----------------------------"); 
        listaErrores.add(new Errores("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
        //proyecto1_compi1.GUI.jTextArea2.setText("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

    } 


    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    // Reporta error sintactico inrecuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 

    }  
    

    public List<String> salidas = new ArrayList<String>();

    //Lista de errores
    public ArrayList<Errores> listaErrores = new ArrayList();

    public ArrayList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= codigo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= PR_VAR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ID MENOR_QUE MENOS valores PR_END PTCOMA 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		variablesDeclaradas.put(clave, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= PR_ARR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ARROBA ID MENOR_QUE MENOS COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		variablesDeclaradas.put(clave, Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_PRINT IGUAL valoresArreglo PR_END PTCOMA 
            {
              Object RESULT =null;
		Funciones.ImprimirConsola();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		Funciones.ImprimirColumna(nombre);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE ARROBA ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		Funciones.ImprimirColumnaArreglo(Funciones.busquedaLista(val), nombre);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= GraficaLineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= GraficaBarras 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= GraficaPie 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= GraficaHistograma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valores ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT="-"+val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valores ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valores ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=variablesDeclaradas.get(val); //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valores ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valores ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valores ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=val; //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tiposVariables ::= PR_CHAR COR_IZQ COR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tiposVariables ::= PR_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valoresArreglo ::= valoresArreglo COMA funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valoresArreglo ::= valoresArreglo COMA operaciones 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valoresArreglo ::= valoresArreglo COMA MENOS DOUBLE 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add("-"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valoresArreglo ::= valoresArreglo COMA DOUBLE 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valoresArreglo ::= valoresArreglo COMA STRING 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val); //System.out.println(val.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valoresArreglo ::= valoresArreglo COMA ID 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valoresArreglo ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val); //System.out.println(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valoresArreglo ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add("-"+val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valoresArreglo ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valoresArreglo ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valoresArreglo ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valoresArreglo ::= ARROBA ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valoresArreglo ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listaDatosTemp.add(val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones ::= PR_SUM PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "SUM");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones ::= PR_RES PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "RES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones ::= PR_MUL PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "MUL");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones ::= PR_DIV PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "DIV");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones ::= PR_MOD PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.operaciones(val1, val2, "MOD");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valoresOperaciones ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valoresOperaciones ::= funcionesEstadisticas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valoresOperaciones ::= MENOS DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="-"+val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valoresOperaciones ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valoresOperaciones ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=variablesDeclaradas.get(val); //System.out.println(variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MEDIA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MEDIANA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcionesEstadisticas ::= PR_MODA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MODA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "VARIANZA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcionesEstadisticas ::= PR_MAX PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MAX");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcionesEstadisticas ::= PR_MIN PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;
		RESULT=Funciones.estadisticas(Funciones.copiaLista(), "MIN");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MEDIA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MEDIANA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcionesEstadisticas ::= PR_MODA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MODA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "VARIANZA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcionesEstadisticas ::= PR_MAX PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MAX");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcionesEstadisticas ::= PR_MIN PAR_IZQ ARROBA ID PAR_DER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=Funciones.estadisticas(Funciones.busquedaLista(val), "MIN");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GraficaLineas ::= PR_GRAPHLINE PAR_IZQ instruccionesGraficas PR_EXEC PR_GRAPHLINE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaLineas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GraficaBarras ::= PR_GRAPHBAR PAR_IZQ instruccionesGraficas PR_EXEC PR_GRAPHBAR PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaBarras",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GraficaPie ::= PR_GRAPHPIE PAR_IZQ instruccionesGraficas PR_EXEC PR_GRAPHPIE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaPie",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GraficaHistograma ::= PR_HISTOGRAM PAR_IZQ instruccionesGraficas PR_EXEC PR_HISTOGRAM PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaHistograma",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // intruccionGrafica ::= PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("titulo", val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // intruccionGrafica ::= PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("titulo", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // intruccionGrafica ::= PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		datosGraficas.put("ejeX", Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // intruccionGrafica ::= PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL ARROBA ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("ejeX", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // intruccionGrafica ::= PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		datosGraficas.put("ejeY", Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // intruccionGrafica ::= PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL ARROBA ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("ejeY", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // intruccionGrafica ::= PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("tituloX", val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // intruccionGrafica ::= PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("tituloX", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // intruccionGrafica ::= PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("tituloY", val);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // intruccionGrafica ::= PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("tituloY", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // intruccionGrafica ::= PR_LABEL DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		datosGraficas.put("label", Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // intruccionGrafica ::= PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		datosGraficas.put("values", Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // intruccionGrafica ::= PR_VALUES DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;
		datosGraficas.put("values", Funciones.copiaLista());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // intruccionGrafica ::= PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL ARROBA ID PR_END PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		datosGraficas.put("values", variablesDeclaradas.get(val));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // intruccionGrafica ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("intruccionGrafica",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruccionesGraficas ::= intruccionGrafica instruccionesGraficas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesGraficas",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruccionesGraficas ::= intruccionGrafica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesGraficas",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comentarios ::= COM_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comentarios ::= COM_MULTI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
