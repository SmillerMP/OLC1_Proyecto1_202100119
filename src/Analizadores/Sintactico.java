
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 65)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Clases.Errores;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 65) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\007\000\002\003\006\000\002\003\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\004\015\000\002\004\020\000\002\004\012\000\002" +
    "\004\017\000\002\004\015\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\006\005\000\002" +
    "\006\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\011\002\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\010\000" +
    "\002\013\010\000\002\013\010\000\002\013\010\000\002" +
    "\013\010\000\002\013\010\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\014\077\000\002\015\077\000" +
    "\002\016\053\000\002\017\037\000\002\020\003\000\002" +
    "\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\010\007\010\010\004\025\007\001\002\000" +
    "\034\002\uffc1\003\uffc1\007\uffc1\010\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\032\uffc1\046\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\001\002\000\004\002\u0171\001\002\000\012\002\ufffc" +
    "\007\ufffc\010\ufffc\025\ufffc\001\002\000\026\003\025\007" +
    "\010\010\004\027\021\032\027\046\017\052\032\053\014" +
    "\054\031\055\024\001\002\000\034\002\uffc2\003\uffc2\007" +
    "\uffc2\010\uffc2\025\uffc2\026\uffc2\027\uffc2\032\uffc2\046\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000\012\002" +
    "\000\007\010\010\004\025\013\001\002\000\012\002\uffff" +
    "\007\uffff\010\uffff\025\uffff\001\002\000\026\003\025\007" +
    "\010\010\004\027\021\032\027\046\017\052\032\053\014" +
    "\054\031\055\024\001\002\000\004\011\u0132\001\002\000" +
    "\030\003\ufff1\007\ufff1\010\ufff1\026\ufff1\027\ufff1\032\ufff1" +
    "\046\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\001\002\000" +
    "\030\003\uffef\007\uffef\010\uffef\026\uffef\027\uffef\032\uffef" +
    "\046\uffef\052\uffef\053\uffef\054\uffef\055\uffef\001\002\000" +
    "\004\024\u011e\001\002\000\030\003\ufff2\007\ufff2\010\ufff2" +
    "\026\ufff2\027\ufff2\032\ufff2\046\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\001\002\000\004\024\u010f\001\002\000\004" +
    "\026\u010d\001\002\000\030\003\025\007\010\010\004\026" +
    "\ufffa\027\021\032\027\046\017\052\032\053\014\054\031" +
    "\055\024\001\002\000\004\011\360\001\002\000\026\003" +
    "\025\007\010\010\004\027\021\032\027\046\017\052\032" +
    "\053\014\054\031\055\024\001\002\000\030\003\ufff3\007" +
    "\ufff3\010\ufff3\026\ufff3\027\ufff3\032\ufff3\046\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\001\002\000\004\024\336\001" +
    "\002\000\030\003\ufff0\007\ufff0\010\ufff0\026\ufff0\027\ufff0" +
    "\032\ufff0\046\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\001" +
    "\002\000\004\011\242\001\002\000\004\011\033\001\002" +
    "\000\004\064\034\001\002\000\004\024\035\001\002\000" +
    "\004\024\036\001\002\000\004\031\037\001\002\000\004" +
    "\013\040\001\002\000\004\014\041\001\002\000\004\016" +
    "\042\001\002\000\004\013\043\001\002\000\044\004\052" +
    "\005\064\006\055\014\uffdc\015\063\023\uffdc\033\061\034" +
    "\054\035\050\036\044\037\053\040\060\041\051\042\062" +
    "\043\045\044\047\045\046\001\002\000\004\011\235\001" +
    "\002\000\004\011\226\001\002\000\004\011\217\001\002" +
    "\000\004\011\210\001\002\000\004\011\203\001\002\000" +
    "\004\011\174\001\002\000\012\012\uffe0\014\uffe0\023\uffe0" +
    "\026\uffe0\001\002\000\004\011\167\001\002\000\004\011" +
    "\162\001\002\000\012\012\uffe2\014\uffe2\023\uffe2\026\uffe2" +
    "\001\002\000\012\012\uffdd\014\uffdd\023\uffdd\026\uffdd\001" +
    "\002\000\012\012\uffdf\014\uffdf\023\uffdf\026\uffdf\001\002" +
    "\000\004\011\153\001\002\000\004\011\142\001\002\000" +
    "\004\011\133\001\002\000\004\004\132\001\002\000\012" +
    "\012\uffe1\014\uffe1\023\uffe1\026\uffe1\001\002\000\006\014" +
    "\067\023\066\001\002\000\046\004\127\005\126\006\125" +
    "\012\uffdc\014\uffdc\023\uffdc\026\uffdc\033\061\034\054\035" +
    "\050\036\044\037\053\040\060\041\051\042\062\043\045" +
    "\044\047\045\046\001\002\000\004\026\070\001\002\000" +
    "\004\022\071\001\002\000\004\063\072\001\002\000\004" +
    "\024\073\001\002\000\004\024\074\001\002\000\004\030" +
    "\075\001\002\000\004\016\076\001\002\000\004\013\077" +
    "\001\002\000\044\004\052\005\064\006\055\014\uffdc\015" +
    "\063\023\uffdc\033\061\034\054\035\050\036\044\037\053" +
    "\040\060\041\051\042\062\043\045\044\047\045\046\001" +
    "\002\000\006\014\101\023\066\001\002\000\004\026\102" +
    "\001\002\000\004\022\103\001\002\000\004\056\104\001" +
    "\002\000\004\024\105\001\002\000\004\024\106\001\002" +
    "\000\004\031\107\001\002\000\004\013\110\001\002\000" +
    "\004\014\111\001\002\000\004\016\112\001\002\000\004" +
    "\006\113\001\002\000\004\026\114\001\002\000\004\022" +
    "\115\001\002\000\004\051\116\001\002\000\004\052\117" +
    "\001\002\000\004\026\120\001\002\000\004\022\121\001" +
    "\002\000\004\012\122\001\002\000\004\026\123\001\002" +
    "\000\004\022\124\001\002\000\030\003\uffc4\007\uffc4\010" +
    "\uffc4\026\uffc4\027\uffc4\032\uffc4\046\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\001\002\000\012\012\uffe4\014\uffe4\023" +
    "\uffe4\026\uffe4\001\002\000\012\012\uffe5\014\uffe5\023\uffe5" +
    "\026\uffe5\001\002\000\012\012\uffe3\014\uffe3\023\uffe3\026" +
    "\uffe3\001\002\000\012\012\uffe6\014\uffe6\023\uffe6\026\uffe6" +
    "\001\002\000\012\012\uffe7\014\uffe7\023\uffe7\026\uffe7\001" +
    "\002\000\012\012\uffde\014\uffde\023\uffde\026\uffde\001\002" +
    "\000\046\004\052\005\064\006\055\012\uffdc\013\134\015" +
    "\063\023\uffdc\033\061\034\054\035\050\036\044\037\053" +
    "\040\060\041\051\042\062\043\045\044\047\045\046\001" +
    "\002\000\044\004\052\005\064\006\055\014\uffdc\015\063" +
    "\023\uffdc\033\061\034\054\035\050\036\044\037\053\040" +
    "\060\041\051\042\062\043\045\044\047\045\046\001\002" +
    "\000\006\012\136\023\066\001\002\000\014\012\uffca\014" +
    "\uffca\017\uffca\023\uffca\026\uffca\001\002\000\006\014\140" +
    "\023\066\001\002\000\004\012\141\001\002\000\014\012" +
    "\uffd0\014\uffd0\017\uffd0\023\uffd0\026\uffd0\001\002\000\036" +
    "\004\145\005\144\023\uffdc\033\061\034\054\035\050\036" +
    "\044\037\053\040\060\041\051\042\062\043\045\044\047" +
    "\045\046\001\002\000\004\023\150\001\002\000\006\012" +
    "\uffd4\023\uffd4\001\002\000\006\012\uffd3\023\uffd3\001\002" +
    "\000\006\012\uffd6\023\uffd6\001\002\000\006\012\uffd5\023" +
    "\uffd5\001\002\000\036\004\145\005\144\012\uffdc\033\061" +
    "\034\054\035\050\036\044\037\053\040\060\041\051\042" +
    "\062\043\045\044\047\045\046\001\002\000\004\012\152" +
    "\001\002\000\014\012\uffdb\014\uffdb\017\uffdb\023\uffdb\026" +
    "\uffdb\001\002\000\046\004\052\005\064\006\055\012\uffdc" +
    "\013\154\015\063\023\uffdc\033\061\034\054\035\050\036" +
    "\044\037\053\040\060\041\051\042\062\043\045\044\047" +
    "\045\046\001\002\000\044\004\052\005\064\006\055\014" +
    "\uffdc\015\063\023\uffdc\033\061\034\054\035\050\036\044" +
    "\037\053\040\060\041\051\042\062\043\045\044\047\045" +
    "\046\001\002\000\006\012\156\023\066\001\002\000\014" +
    "\012\uffcc\014\uffcc\017\uffcc\023\uffcc\026\uffcc\001\002\000" +
    "\006\014\160\023\066\001\002\000\004\012\161\001\002" +
    "\000\014\012\uffd2\014\uffd2\017\uffd2\023\uffd2\026\uffd2\001" +
    "\002\000\036\004\145\005\144\023\uffdc\033\061\034\054" +
    "\035\050\036\044\037\053\040\060\041\051\042\062\043" +
    "\045\044\047\045\046\001\002\000\004\023\164\001\002" +
    "\000\036\004\145\005\144\012\uffdc\033\061\034\054\035" +
    "\050\036\044\037\053\040\060\041\051\042\062\043\045" +
    "\044\047\045\046\001\002\000\004\012\166\001\002\000" +
    "\014\012\uffda\014\uffda\017\uffda\023\uffda\026\uffda\001\002" +
    "\000\036\004\145\005\144\023\uffdc\033\061\034\054\035" +
    "\050\036\044\037\053\040\060\041\051\042\062\043\045" +
    "\044\047\045\046\001\002\000\004\023\171\001\002\000" +
    "\036\004\145\005\144\012\uffdc\033\061\034\054\035\050" +
    "\036\044\037\053\040\060\041\051\042\062\043\045\044" +
    "\047\045\046\001\002\000\004\012\173\001\002\000\014" +
    "\012\uffd7\014\uffd7\017\uffd7\023\uffd7\026\uffd7\001\002\000" +
    "\046\004\052\005\064\006\055\012\uffdc\013\175\015\063" +
    "\023\uffdc\033\061\034\054\035\050\036\044\037\053\040" +
    "\060\041\051\042\062\043\045\044\047\045\046\001\002" +
    "\000\044\004\052\005\064\006\055\014\uffdc\015\063\023" +
    "\uffdc\033\061\034\054\035\050\036\044\037\053\040\060" +
    "\041\051\042\062\043\045\044\047\045\046\001\002\000" +
    "\006\012\177\023\066\001\002\000\014\012\uffcb\014\uffcb" +
    "\017\uffcb\023\uffcb\026\uffcb\001\002\000\006\014\201\023" +
    "\066\001\002\000\004\012\202\001\002\000\014\012\uffd1" +
    "\014\uffd1\017\uffd1\023\uffd1\026\uffd1\001\002\000\036\004" +
    "\145\005\144\023\uffdc\033\061\034\054\035\050\036\044" +
    "\037\053\040\060\041\051\042\062\043\045\044\047\045" +
    "\046\001\002\000\004\023\205\001\002\000\036\004\145" +
    "\005\144\012\uffdc\033\061\034\054\035\050\036\044\037" +
    "\053\040\060\041\051\042\062\043\045\044\047\045\046" +
    "\001\002\000\004\012\207\001\002\000\014\012\uffd9\014" +
    "\uffd9\017\uffd9\023\uffd9\026\uffd9\001\002\000\046\004\052" +
    "\005\064\006\055\012\uffdc\013\211\015\063\023\uffdc\033" +
    "\061\034\054\035\050\036\044\037\053\040\060\041\051" +
    "\042\062\043\045\044\047\045\046\001\002\000\044\004" +
    "\052\005\064\006\055\014\uffdc\015\063\023\uffdc\033\061" +
    "\034\054\035\050\036\044\037\053\040\060\041\051\042" +
    "\062\043\045\044\047\045\046\001\002\000\006\012\213" +
    "\023\066\001\002\000\014\012\uffc8\014\uffc8\017\uffc8\023" +
    "\uffc8\026\uffc8\001\002\000\006\014\215\023\066\001\002" +
    "\000\004\012\216\001\002\000\014\012\uffce\014\uffce\017" +
    "\uffce\023\uffce\026\uffce\001\002\000\046\004\052\005\064" +
    "\006\055\012\uffdc\013\220\015\063\023\uffdc\033\061\034" +
    "\054\035\050\036\044\037\053\040\060\041\051\042\062" +
    "\043\045\044\047\045\046\001\002\000\044\004\052\005" +
    "\064\006\055\014\uffdc\015\063\023\uffdc\033\061\034\054" +
    "\035\050\036\044\037\053\040\060\041\051\042\062\043" +
    "\045\044\047\045\046\001\002\000\006\012\222\023\066" +
    "\001\002\000\014\012\uffc7\014\uffc7\017\uffc7\023\uffc7\026" +
    "\uffc7\001\002\000\006\014\224\023\066\001\002\000\004" +
    "\012\225\001\002\000\014\012\uffcd\014\uffcd\017\uffcd\023" +
    "\uffcd\026\uffcd\001\002\000\046\004\052\005\064\006\055" +
    "\012\uffdc\013\227\015\063\023\uffdc\033\061\034\054\035" +
    "\050\036\044\037\053\040\060\041\051\042\062\043\045" +
    "\044\047\045\046\001\002\000\044\004\052\005\064\006" +
    "\055\014\uffdc\015\063\023\uffdc\033\061\034\054\035\050" +
    "\036\044\037\053\040\060\041\051\042\062\043\045\044" +
    "\047\045\046\001\002\000\006\012\231\023\066\001\002" +
    "\000\014\012\uffc9\014\uffc9\017\uffc9\023\uffc9\026\uffc9\001" +
    "\002\000\006\014\233\023\066\001\002\000\004\012\234" +
    "\001\002\000\014\012\uffcf\014\uffcf\017\uffcf\023\uffcf\026" +
    "\uffcf\001\002\000\036\004\145\005\144\023\uffdc\033\061" +
    "\034\054\035\050\036\044\037\053\040\060\041\051\042" +
    "\062\043\045\044\047\045\046\001\002\000\004\023\237" +
    "\001\002\000\036\004\145\005\144\012\uffdc\033\061\034" +
    "\054\035\050\036\044\037\053\040\060\041\051\042\062" +
    "\043\045\044\047\045\046\001\002\000\004\012\241\001" +
    "\002\000\014\012\uffd8\014\uffd8\017\uffd8\023\uffd8\026\uffd8" +
    "\001\002\000\004\056\243\001\002\000\004\024\244\001" +
    "\002\000\004\024\245\001\002\000\004\031\246\001\002" +
    "\000\004\013\247\001\002\000\004\014\250\001\002\000" +
    "\004\016\251\001\002\000\004\006\252\001\002\000\004" +
    "\026\253\001\002\000\004\022\254\001\002\000\004\057" +
    "\255\001\002\000\004\024\256\001\002\000\004\024\257" +
    "\001\002\000\004\031\260\001\002\000\004\013\261\001" +
    "\002\000\004\014\262\001\002\000\004\016\263\001\002" +
    "\000\004\013\264\001\002\000\044\004\052\005\064\006" +
    "\055\014\uffdc\015\063\023\uffdc\033\061\034\054\035\050" +
    "\036\044\037\053\040\060\041\051\042\062\043\045\044" +
    "\047\045\046\001\002\000\006\014\266\023\066\001\002" +
    "\000\004\026\267\001\002\000\004\022\270\001\002\000" +
    "\004\060\271\001\002\000\004\024\272\001\002\000\004" +
    "\024\273\001\002\000\004\030\274\001\002\000\004\016" +
    "\275\001\002\000\004\013\276\001\002\000\044\004\052" +
    "\005\064\006\055\014\uffdc\015\063\023\uffdc\033\061\034" +
    "\054\035\050\036\044\037\053\040\060\041\051\042\062" +
    "\043\045\044\047\045\046\001\002\000\006\014\300\023" +
    "\066\001\002\000\004\026\301\001\002\000\004\022\302" +
    "\001\002\000\004\061\303\001\002\000\004\024\304\001" +
    "\002\000\004\024\305\001\002\000\004\031\306\001\002" +
    "\000\004\013\307\001\002\000\004\014\310\001\002\000" +
    "\004\016\311\001\002\000\004\006\312\001\002\000\004" +
    "\026\313\001\002\000\004\022\314\001\002\000\004\062" +
    "\315\001\002\000\004\024\316\001\002\000\004\024\317" +
    "\001\002\000\004\031\320\001\002\000\004\013\321\001" +
    "\002\000\004\014\322\001\002\000\004\016\323\001\002" +
    "\000\004\006\324\001\002\000\004\026\325\001\002\000" +
    "\004\022\326\001\002\000\004\051\327\001\002\000\004" +
    "\054\330\001\002\000\004\026\331\001\002\000\004\022" +
    "\332\001\002\000\004\012\333\001\002\000\004\026\334" +
    "\001\002\000\004\022\335\001\002\000\030\003\uffc6\007" +
    "\uffc6\010\uffc6\026\uffc6\027\uffc6\032\uffc6\046\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\001\002\000\006\030\340\031" +
    "\341\001\002\000\004\024\344\001\002\000\004\024\uffe8" +
    "\001\002\000\004\013\342\001\002\000\004\014\343\001" +
    "\002\000\004\024\uffe9\001\002\000\004\024\345\001\002" +
    "\000\004\015\346\001\002\000\004\004\347\001\002\000" +
    "\004\021\350\001\002\000\004\017\351\001\002\000\004" +
    "\013\352\001\002\000\044\004\052\005\064\006\055\014" +
    "\uffdc\015\063\023\uffdc\033\061\034\054\035\050\036\044" +
    "\037\053\040\060\041\051\042\062\043\045\044\047\045" +
    "\046\001\002\000\006\014\354\023\066\001\002\000\004" +
    "\026\355\001\002\000\004\022\356\001\002\000\030\003" +
    "\ufff7\007\ufff7\010\ufff7\026\ufff7\027\ufff7\032\ufff7\046\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000\004\026" +
    "\ufff9\001\002\000\004\056\361\001\002\000\004\024\362" +
    "\001\002\000\004\024\363\001\002\000\004\031\364\001" +
    "\002\000\004\013\365\001\002\000\004\014\366\001\002" +
    "\000\004\016\367\001\002\000\004\006\370\001\002\000" +
    "\004\026\371\001\002\000\004\022\372\001\002\000\004" +
    "\063\373\001\002\000\004\024\374\001\002\000\004\024" +
    "\375\001\002\000\004\030\376\001\002\000\004\016\377" +
    "\001\002\000\004\013\u0100\001\002\000\044\004\052\005" +
    "\064\006\055\014\uffdc\015\063\023\uffdc\033\061\034\054" +
    "\035\050\036\044\037\053\040\060\041\051\042\062\043" +
    "\045\044\047\045\046\001\002\000\006\014\u0102\023\066" +
    "\001\002\000\004\026\u0103\001\002\000\004\022\u0104\001" +
    "\002\000\004\051\u0105\001\002\000\004\055\u0106\001\002" +
    "\000\004\026\u0107\001\002\000\004\022\u0108\001\002\000" +
    "\004\012\u0109\001\002\000\004\026\u010a\001\002\000\004" +
    "\022\u010b\001\002\000\030\003\uffc3\007\uffc3\010\uffc3\026" +
    "\uffc3\027\uffc3\032\uffc3\046\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\001\002\000\004\026\ufffb\001\002\000\004\025" +
    "\u010e\001\002\000\012\002\ufffe\007\ufffe\010\ufffe\025\ufffe" +
    "\001\002\000\006\030\340\031\341\001\002\000\004\024" +
    "\u0111\001\002\000\004\024\u0112\001\002\000\004\004\u0113" +
    "\001\002\000\004\021\u0114\001\002\000\004\017\u0115\001" +
    "\002\000\040\004\u0119\005\u0118\006\u0117\026\uffdc\033\061" +
    "\034\054\035\050\036\044\037\053\040\060\041\051\042" +
    "\062\043\045\044\047\045\046\001\002\000\004\026\u011c" +
    "\001\002\000\006\017\uffec\026\uffec\001\002\000\006\017" +
    "\uffee\026\uffee\001\002\000\006\017\uffed\026\uffed\001\002" +
    "\000\006\017\uffeb\026\uffeb\001\002\000\006\017\uffea\026" +
    "\uffea\001\002\000\004\022\u011d\001\002\000\030\003\ufff8" +
    "\007\ufff8\010\ufff8\026\ufff8\027\ufff8\032\ufff8\046\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002\000\004\024\u011f" +
    "\001\002\000\006\047\u0120\050\u0121\001\002\000\004\016" +
    "\u012e\001\002\000\004\016\u0122\001\002\000\040\004\u0119" +
    "\005\u0118\006\u0117\017\uffdc\033\061\034\054\035\050\036" +
    "\044\037\053\040\060\041\051\042\062\043\045\044\047" +
    "\045\046\001\002\000\004\017\u0124\001\002\000\004\020" +
    "\u0125\001\002\000\046\004\052\005\064\006\055\013\u0126" +
    "\015\063\023\uffdc\026\uffdc\033\061\034\054\035\050\036" +
    "\044\037\053\040\060\041\051\042\062\043\045\044\047" +
    "\045\046\001\002\000\044\004\052\005\064\006\055\014" +
    "\uffdc\015\063\023\uffdc\033\061\034\054\035\050\036\044" +
    "\037\053\040\060\041\051\042\062\043\045\044\047\045" +
    "\046\001\002\000\006\023\066\026\u0128\001\002\000\004" +
    "\022\u0129\001\002\000\030\003\ufff4\007\ufff4\010\ufff4\026" +
    "\ufff4\027\ufff4\032\ufff4\046\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\001\002\000\006\014\u012b\023\066\001\002\000" +
    "\004\026\u012c\001\002\000\004\022\u012d\001\002\000\030" +
    "\003\ufff5\007\ufff5\010\ufff5\026\ufff5\027\ufff5\032\ufff5\046" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\001\002\000\044" +
    "\004\052\005\064\006\055\015\063\023\uffdc\026\uffdc\033" +
    "\061\034\054\035\050\036\044\037\053\040\060\041\051" +
    "\042\062\043\045\044\047\045\046\001\002\000\006\023" +
    "\066\026\u0130\001\002\000\004\022\u0131\001\002\000\030" +
    "\003\ufff6\007\ufff6\010\ufff6\026\ufff6\027\ufff6\032\ufff6\046" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\004" +
    "\056\u0133\001\002\000\004\024\u0134\001\002\000\004\024" +
    "\u0135\001\002\000\004\031\u0136\001\002\000\004\013\u0137" +
    "\001\002\000\004\014\u0138\001\002\000\004\016\u0139\001" +
    "\002\000\004\006\u013a\001\002\000\004\026\u013b\001\002" +
    "\000\004\022\u013c\001\002\000\004\057\u013d\001\002\000" +
    "\004\024\u013e\001\002\000\004\024\u013f\001\002\000\004" +
    "\031\u0140\001\002\000\004\013\u0141\001\002\000\004\014" +
    "\u0142\001\002\000\004\016\u0143\001\002\000\004\013\u0144" +
    "\001\002\000\044\004\052\005\064\006\055\014\uffdc\015" +
    "\063\023\uffdc\033\061\034\054\035\050\036\044\037\053" +
    "\040\060\041\051\042\062\043\045\044\047\045\046\001" +
    "\002\000\006\014\u0146\023\066\001\002\000\004\026\u0147" +
    "\001\002\000\004\022\u0148\001\002\000\004\060\u0149\001" +
    "\002\000\004\024\u014a\001\002\000\004\024\u014b\001\002" +
    "\000\004\030\u014c\001\002\000\004\016\u014d\001\002\000" +
    "\004\013\u014e\001\002\000\044\004\052\005\064\006\055" +
    "\014\uffdc\015\063\023\uffdc\033\061\034\054\035\050\036" +
    "\044\037\053\040\060\041\051\042\062\043\045\044\047" +
    "\045\046\001\002\000\006\014\u0150\023\066\001\002\000" +
    "\004\026\u0151\001\002\000\004\022\u0152\001\002\000\004" +
    "\061\u0153\001\002\000\004\024\u0154\001\002\000\004\024" +
    "\u0155\001\002\000\004\031\u0156\001\002\000\004\013\u0157" +
    "\001\002\000\004\014\u0158\001\002\000\004\016\u0159\001" +
    "\002\000\004\006\u015a\001\002\000\004\026\u015b\001\002" +
    "\000\004\022\u015c\001\002\000\004\062\u015d\001\002\000" +
    "\004\024\u015e\001\002\000\004\024\u015f\001\002\000\004" +
    "\031\u0160\001\002\000\004\013\u0161\001\002\000\004\014" +
    "\u0162\001\002\000\004\016\u0163\001\002\000\004\006\u0164" +
    "\001\002\000\004\026\u0165\001\002\000\004\022\u0166\001" +
    "\002\000\004\051\u0167\001\002\000\004\053\u0168\001\002" +
    "\000\004\026\u0169\001\002\000\004\022\u016a\001\002\000" +
    "\004\012\u016b\001\002\000\004\026\u016c\001\002\000\004" +
    "\022\u016d\001\002\000\030\003\uffc5\007\uffc5\010\uffc5\026" +
    "\uffc5\027\uffc5\032\uffc5\046\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\001\002\000\004\026\u016f\001\002\000\004\025" +
    "\u0170\001\002\000\012\002\ufffd\007\ufffd\010\ufffd\025\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\010\002\004\003\010\020\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u016d\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\004\020\011\001\001" +
    "\000\002\001\001\000\020\004\022\005\021\014\025\015" +
    "\017\016\014\017\027\020\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\022\005\u010b\014\025\015\017\016\014\017\027\020" +
    "\015\001\001\000\002\001\001\000\020\004\022\005\356" +
    "\014\025\015\017\016\014\017\027\020\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\064\011\056\013\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\127\013\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\077\011\056\013\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\134\011\056\013\055" +
    "\001\001\000\010\010\136\011\056\013\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\145\012\142\013" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\145\012\150\013\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\154\011\056\013\055\001\001\000" +
    "\010\010\156\011\056\013\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\145\012\162\013\146\001\001" +
    "\000\002\001\001\000\010\011\145\012\164\013\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\145" +
    "\012\167\013\146\001\001\000\002\001\001\000\010\011" +
    "\145\012\171\013\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\175\011\056\013\055\001\001\000" +
    "\010\010\177\011\056\013\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\145\012\203\013\146\001\001" +
    "\000\002\001\001\000\010\011\145\012\205\013\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\211" +
    "\011\056\013\055\001\001\000\010\010\213\011\056\013" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\220\011\056\013\055\001\001\000\010\010\222\011\056" +
    "\013\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\227\011\056\013\055\001\001\000\010\010\231\011" +
    "\056\013\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\145\012\235\013\146\001\001\000\002\001\001" +
    "\000\010\011\145\012\237\013\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\264\011\056\013\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\276\011\056\013" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\352\011" +
    "\056\013\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u0100\011\056\013\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\u0115\011\u0119\013\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\u0122\011\u0119\013\u011a" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u0126\011\056\013\055\001\001\000\010\010\u0129\011\056" +
    "\013\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\u012e\011\056\013" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\u0144" +
    "\011\056\013\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u014e\011\056\013\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public static int indent = 0;
    public static String traduccion = "";

    HashMap<Object, Object> mapa_globales = new HashMap<>();

    // Guarda el error Sintactico
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //System.out.println("------------------------ Fin de Errores ----------------------------"); 
        listaErrores.add(new Errores("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
        //proyecto1_compi1.GUI.jTextArea2.setText("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");

    } 


    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    // Reporta error sintactico inrecuperable
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 

    }  
    

    public List<String> salidas = new ArrayList<String>();

    //Lista de errores
    public ArrayList<Errores> listaErrores = new ArrayList();

    public ArrayList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= codigo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= PR_PROGRAM instrucciones PR_END PR_PROGRAM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= PR_VAR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ID MENOR_QUE MENOS valores PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= PR_ARR DOSPUNTOS tiposVariables DOSPUNTOS DOSPUNTOS ARROBA ID MENOR_QUE MENOS COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_PRINT IGUAL valoresArreglo PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE COR_IZQ valoresArreglo COR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= PR_CONSOLE DOSPUNTOS DOSPUNTOS PR_COLUMN IGUAL valores MENOS MAYOR_QUE valoresArreglo PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= GraficaLineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= GraficaBarras 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= GraficaPie 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= GraficaHistograma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= comentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valores ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valores ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valores ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valores ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valores ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tiposVariables ::= PR_CHAR COR_IZQ COR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tiposVariables ::= PR_DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tiposVariables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valoresArreglo ::= valoresArreglo COMA funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valoresArreglo ::= valoresArreglo COMA operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valoresArreglo ::= valoresArreglo COMA DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valoresArreglo ::= valoresArreglo COMA STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valoresArreglo ::= valoresArreglo COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valoresArreglo ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valoresArreglo ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valoresArreglo ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valoresArreglo ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valoresArreglo ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valoresArreglo ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresArreglo",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaciones ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones ::= PR_SUM PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones ::= PR_RES PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones ::= PR_MUL PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones ::= PR_DIV PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones ::= PR_MOD PAR_IZQ valoresOperaciones COMA valoresOperaciones PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valoresOperaciones ::= operaciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valoresOperaciones ::= funcionesEstadisticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valoresOperaciones ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valoresOperaciones ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valoresOperaciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcionesEstadisticas ::= PR_MODA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcionesEstadisticas ::= PR_MAX PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcionesEstadisticas ::= PR_MIN PAR_IZQ COR_IZQ valoresArreglo COR_DER PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcionesEstadisticas ::= PR_MEDIA PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcionesEstadisticas ::= PR_MEDIANA PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcionesEstadisticas ::= PR_MODA PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcionesEstadisticas ::= PR_VARIANZA PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcionesEstadisticas ::= PR_MAX PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcionesEstadisticas ::= PR_MIN PAR_IZQ valoresArreglo PAR_DER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionesEstadisticas",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // GraficaLineas ::= PR_GRAPHLINE PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHLINE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaLineas",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-60)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GraficaBarras ::= PR_GRAPHBAR PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EJEX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EJEY DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULOX DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_TITULOY DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHBAR PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaBarras",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-60)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GraficaPie ::= PR_GRAPHPIE PAR_IZQ PR_LABEL DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_EXEC PR_GRAPHPIE PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaPie",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-40)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GraficaHistograma ::= PR_HISTOGRAM PAR_IZQ PR_TITULO DOSPUNTOS DOSPUNTOS PR_CHAR COR_IZQ COR_DER IGUAL STRING PR_END PTCOMA PR_VALUES DOSPUNTOS DOSPUNTOS PR_DOUBLE IGUAL COR_IZQ valoresArreglo COR_DER PR_END PTCOMA PR_EXEC PR_HISTOGRAM PR_END PTCOMA PAR_DER PR_END PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GraficaHistograma",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-28)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comentarios ::= COM_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comentarios ::= COM_MULTI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
