package Analizadores;
import java_cup.runtime.Symbol; 
import java.util.ArrayList;

import Clases.Errores;
import Clases.Tokens;

%% 

// Codigo

%{
    public static ArrayList<Errores> listaErrores = new ArrayList();
    public static ArrayList<Tokens> listaTokens = new ArrayList();
%}


%class Lexico
%public 
%line 
%char 
%cup 
%unicode
%ignorecase

%init{ 
	yyline = 1; 
	yychar = 1; 
%init} 

BLANCOS = [ \r\t]+   
DOUBLE = [0-9]+(\.[0-9]+)?
LETRA   = [a-zA-ZÑñ]
ID      = {LETRA}({LETRA}|{DOUBLE}|"_")*
STRING = \"(([^\"\\]?|\\.)*)\"
COM_SIMPLE = "!"[^\n]*\n
COM_MULTI = "<!" [^<>]* ( <! [^<>]* )* "!>"



%%
"program"   {listaTokens.add(new Tokens(yytext(), "PR_PROGRAM", yyline+"", yychar+""));     return new Symbol(sym.PR_PROGRAM, yyline, yychar, yytext()); }
"end"       {listaTokens.add(new Tokens(yytext(), "PR_END", yyline+"", yychar+""));         return new Symbol(sym.PR_END, yyline, yychar, yytext()); }
"var"       {listaTokens.add(new Tokens(yytext(), "PR_VAR", yyline+"", yychar+""));         return new Symbol(sym.PR_VAR, yyline, yychar, yytext()); }
"double"    {listaTokens.add(new Tokens(yytext(), "PR_DOUBLE", yyline+"", yychar+""));      return new Symbol(sym.PR_DOUBLE, yyline, yychar, yytext()); }
"char"      {listaTokens.add(new Tokens(yytext(), "PR_CHAR", yyline+"", yychar+""));        return new Symbol(sym.PR_CHAR, yyline, yychar, yytext()); }
"arr"       {listaTokens.add(new Tokens(yytext(), "PR_ARR", yyline+"", yychar+""));         return new Symbol(sym.PR_ARR, yyline, yychar, yytext()); }
"sum"       {listaTokens.add(new Tokens(yytext(), "PR_SUM", yyline+"", yychar+""));         return new Symbol(sym.PR_SUM, yyline, yychar, yytext()); }
"res"       {listaTokens.add(new Tokens(yytext(), "PR_RES", yyline+"", yychar+""));         return new Symbol(sym.PR_RES, yyline, yychar, yytext()); }
"mul"       {listaTokens.add(new Tokens(yytext(), "PR_MUL", yyline+"", yychar+""));         return new Symbol(sym.PR_MUL, yyline, yychar, yytext()); }
"div"       {listaTokens.add(new Tokens(yytext(), "PR_DIV", yyline+"", yychar+""));         return new Symbol(sym.PR_DIV, yyline, yychar, yytext()); }
"mod"       {listaTokens.add(new Tokens(yytext(), "PR_MOD", yyline+"", yychar+""));         return new Symbol(sym.PR_MOD, yyline, yychar, yytext()); }
"media"     {listaTokens.add(new Tokens(yytext(), "PR_MEDIA", yyline+"", yychar+""));       return new Symbol(sym.PR_MEDIA, yyline, yychar, yytext()); }
"mediana"   {listaTokens.add(new Tokens(yytext(), "PR_MEDIANA", yyline+"", yychar+""));     return new Symbol(sym.PR_MEDIANA, yyline, yychar, yytext()); }
"moda"      {listaTokens.add(new Tokens(yytext(), "PR_MODA", yyline+"", yychar+""));        return new Symbol(sym.PR_MODA, yyline, yychar, yytext()); }
"varianza"  {listaTokens.add(new Tokens(yytext(), "PR_VARIANZA", yyline+"", yychar+""));    return new Symbol(sym.PR_VARIANZA, yyline, yychar, yytext()); }
"max"       {listaTokens.add(new Tokens(yytext(), "PR_MAX", yyline+"", yychar+""));         return new Symbol(sym.PR_MAX, yyline, yychar, yytext()); }
"min"       {listaTokens.add(new Tokens(yytext(), "PR_MIN", yyline+"", yychar+""));         return new Symbol(sym.PR_MIN, yyline, yychar, yytext()); }
"console"   {listaTokens.add(new Tokens(yytext(), "PR_CONSOLE", yyline+"", yychar+""));     return new Symbol(sym.PR_CONSOLE, yyline, yychar, yytext()); }
"print"     {listaTokens.add(new Tokens(yytext(), "PR_PRINT", yyline+"", yychar+""));       return new Symbol(sym.PR_PRINT, yyline, yychar, yytext()); }
"column"    {listaTokens.add(new Tokens(yytext(), "PR_COLUMN", yyline+"", yychar+""));      return new Symbol(sym.PR_COLUMN, yyline, yychar, yytext()); }
"exec"      {listaTokens.add(new Tokens(yytext(), "PR_EXEC", yyline+"", yychar+""));        return new Symbol(sym.PR_EXEC, yyline, yychar, yytext()); }
"graphPie"  {listaTokens.add(new Tokens(yytext(), "PR_GRAPHPIE", yyline+"", yychar+""));    return new Symbol(sym.PR_GRAPHPIE, yyline, yychar, yytext()); }
"graphBar"  {listaTokens.add(new Tokens(yytext(), "PR_GRAPHBAR", yyline+"", yychar+""));    return new Symbol(sym.PR_GRAPHBAR, yyline, yychar, yytext()); }
"graphLine" {listaTokens.add(new Tokens(yytext(), "PR_GRAPHLINE", yyline+"", yychar+""));   return new Symbol(sym.PR_GRAPHLINE, yyline, yychar, yytext()); }
"Histogram" {listaTokens.add(new Tokens(yytext(), "PR_HISTOGRAM", yyline+"", yychar+""));   return new Symbol(sym.PR_HISTOGRAM, yyline, yychar, yytext()); }
"titulo"    {listaTokens.add(new Tokens(yytext(), "PR_TITULO", yyline+"", yychar+""));      return new Symbol(sym.PR_TITULO, yyline, yychar, yytext()); }
"ejeX"      {listaTokens.add(new Tokens(yytext(), "PR_EJEX", yyline+"", yychar+""));        return new Symbol(sym.PR_EJEX, yyline, yychar, yytext()); }
"ejeY"      {listaTokens.add(new Tokens(yytext(), "PR_EJEY", yyline+"", yychar+""));        return new Symbol(sym.PR_EJEY, yyline, yychar, yytext()); }
"tituloX"   {listaTokens.add(new Tokens(yytext(), "PR_TITULOX", yyline+"", yychar+""));     return new Symbol(sym.PR_TITULOX, yyline, yychar, yytext()); }
"tituloY"   {listaTokens.add(new Tokens(yytext(), "PR_TITULOY", yyline+"", yychar+""));     return new Symbol(sym.PR_TITULOY, yyline, yychar, yytext()); }
"values"    {listaTokens.add(new Tokens(yytext(), "PR_VALUES", yyline+"", yychar+""));      return new Symbol(sym.PR_VALUES, yyline, yychar, yytext()); }
"label"     {listaTokens.add(new Tokens(yytext(), "PR_LABEL", yyline+"", yychar+""));       return new Symbol(sym.PR_LABEL, yyline, yychar, yytext()); }



"("         {listaTokens.add(new Tokens(yytext(), "PAR_IZQ", yyline+"", yychar+""));       return new Symbol(sym.PAR_IZQ, yyline, yychar, yytext()); }
")"         {listaTokens.add(new Tokens(yytext(), "PAR_DER", yyline+"", yychar+""));       return new Symbol(sym.PAR_DER, yyline, yychar, yytext()); }
"["         {listaTokens.add(new Tokens(yytext(), "COR_IZQ", yyline+"", yychar+""));       return new Symbol(sym.COR_IZQ, yyline, yychar, yytext()); }
"]"         {listaTokens.add(new Tokens(yytext(), "COR_DER", yyline+"", yychar+""));       return new Symbol(sym.COR_DER, yyline, yychar, yytext()); }
"@"         {listaTokens.add(new Tokens(yytext(), "ARROBA", yyline+"", yychar+""));        return new Symbol(sym.ARROBA, yyline, yychar, yytext()); }
"="         {listaTokens.add(new Tokens(yytext(), "IGUAL", yyline+"", yychar+""));         return new Symbol(sym.IGUAL, yyline, yychar, yytext()); }
"-"         {listaTokens.add(new Tokens(yytext(), "MENOS", yyline+"", yychar+""));         return new Symbol(sym.MENOS, yyline, yychar, yytext()); }
">"         {listaTokens.add(new Tokens(yytext(), "MAYOR_QUE", yyline+"", yychar+""));     return new Symbol(sym.MAYOR_QUE, yyline, yychar, yytext()); }
"<"         {listaTokens.add(new Tokens(yytext(), "MENOR_QUE", yyline+"", yychar+""));     return new Symbol(sym.MENOR_QUE, yyline, yychar, yytext()); }
";"         {listaTokens.add(new Tokens(yytext(), "PTCOMA", yyline+"", yychar+""));        return new Symbol(sym.PTCOMA, yyline, yychar, yytext()); }
","         {listaTokens.add(new Tokens(yytext(), "COMA", yyline+"", yychar+""));          return new Symbol(sym.COMA, yyline, yychar, yytext()); }
":"         {listaTokens.add(new Tokens(yytext(), "DOSPUNTOS", yyline+"", yychar+""));     return new Symbol(sym.DOSPUNTOS, yyline, yychar, yytext()); }

              
                                                                                 
\n {yychar=1;}
{BLANCOS} {} 
{DOUBLE}   {listaTokens.add(new Tokens(yytext(), "DOUBLE", yyline+"", yychar+""));          return new Symbol(sym.DOUBLE,yyline,yychar, yytext());} 
{ID}        {listaTokens.add(new Tokens(yytext(), "ID", yyline+"", yychar+""));            return new Symbol(sym.ID,yyline,yychar, yytext());} 
{STRING}    {listaTokens.add(new Tokens(yytext(), "STRING", yyline+"", yychar+""));        return new Symbol(sym.STRING,yyline,yychar, yytext());} 
{COM_SIMPLE}    {listaTokens.add(new Tokens(yytext(), "COM_SIMPLE", yyline+"", yychar+""));        return new Symbol(sym.COM_SIMPLE,yyline,yychar, yytext());} 
{COM_MULTI}    {listaTokens.add(new Tokens(yytext(), "COM_MULTI", yyline+"", yychar+""));        return new Symbol(sym.COM_MULTI,yyline,yychar, yytext());}  
. {
    System.err.println("Este es un error lexico: "+yytext()+ ", en la linea: "+yyline+", en la columna: "+yychar);
    listaErrores.add(new Errores("Lexico", "Caracter no encontrado: "+ yytext(), yyline+"", yychar+""));
}


